@using Microsoft.AspNetCore.Components.Authorization
@using Service.SnapFood.Client.Components.Pages.Auth
@using Service.SnapFood.Client.Components.Pages.Cart
@using Service.SnapFood.Client.Infrastructure.Service
@using Service.SnapFood.Share.Model.Commons
@inherits LayoutComponentBase
@inject IUserService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        body {
        margin: 0;
        line-height: 18px;
        font-family: "Times New Roman", serif !important;
        }


        .loading-center {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 24px;
        font-weight: bold;
        background-color: rgba(255, 255, 255, 0.7);
        z-index: 1;
        }

        .loading-center2 {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 24px;
        font-weight: bold;
        background-color: rgba(255, 255, 255, 0.7);
        z-index: -1;
        }

        *, *::before, *::after {
        font-family: inherit !important;
        }

        input, textarea, button, select {
        font-family: inherit !important;
        }
    </style>
</head>
<body>
    <CascadingValue Value="CurrentUser">
        @if (_loaded)
        {
            <FluentLayout>
                <FluentStack Class="body-stack" Orientation="Orientation.Horizontal" Width="100%" HorizontalGap="0" >
                    <NavMenu OpenMenuThongTin="OpenMenuThongTin" />
                    <FluentBodyContent>
                        <div class="container" style="min-height:1100px;">
                            @if (OpenMenu == true)
                            {

                                <main role="main">


                                    <div class="container-fluid mt-3" style="min-height:1100px;">
                                        <marquee behavior="scroll" style="color: red; font-size: 20px; font-weight: bold;padding:10px;">
                                            Kính chào quý khách! Chúc quý khách ngày mới tốt lành.
                                        </marquee>
                                        <div class="row">


                                            <div class="col-md-3 ">
                                                <br/>
                                                <div class="card shadow">
                                                    <div class="card-body">
                                                        <FluentNavMenu>
                                                            <FluentNavLink Icon="@(new Icons.Regular.Size20.History())" OnClick="()=>OpenMenuThongTin(true)" Href="/Lich-Su-Don-Hang">Lịch sử đơn hàng</FluentNavLink>
                                                            <FluentNavLink Icon="@(new Icons.Regular.Size20.Location())" Href="/Dia-Chi" OnClick="()=>OpenMenuThongTin(true)">Địa chỉ giao hàng</FluentNavLink>
                                                            <FluentNavLink Icon="@(new Icons.Regular.Size20.Tag())" Href="/Ma-Giam-Gia" OnClick="()=>OpenMenuThongTin(true)">Mã giảm giá</FluentNavLink>
                                                            <FluentNavLink Icon="@(new Icons.Regular.Size20.Person())" Href="/Thong-Tin-Tai-Khoan" OnClick="()=>OpenMenuThongTin(true)">Thông tin tài khoản</FluentNavLink>
                                                            <hr style="margin:8px" />
                                                            <FluentNavLink Icon="@(new Icons.Regular.Size20.SignOut())" OnClick="Logout">Đăng xuất</FluentNavLink>
                                                        </FluentNavMenu>
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="col col-md-9">
                                                <br />
                                                <div class="card shadow">
                                                    <div class="card-body">
                                                        @Body
                                                    </div>
                                                </div>

                                            </div>
                                        </div>

                                    </div>

                                </main>

                            }
                            else
                            {

                                <main role="main">
                                    <marquee behavior="scroll" direction="left" style="color: red; font-size: 20px; font-weight: bold;padding:10px">
                                        Kính chào quý khách! Chúc quý khách ngày mới tốt lành.
                                    </marquee>
                                    <div class="container-fluid mt-3">
                                        <div class="row">

                                            <div class="col col-12">
                                                @Body
                                                @if (_loadedIconCart)
                                                {
                                                    <IconCart />

                                                }
                                            </div>
                                        </div>
                                    </div>

                                </main>
                            }

                           
                        </div>
                        <div>
                            <Footer />
                        </div>
                        
                    </FluentBodyContent>

                    <FluentToastProvider MaxToastCount="3" Position="ToastPosition.TopRight" RemoveToastsOnNavigation=false />
                    <FluentDialogProvider />
                    <FluentTooltipProvider />
                    <FluentKeyCodeProvider />
                    <FluentMenuProvider />

                </FluentStack>
               

            </FluentLayout>
        }

    </CascadingValue>

</body>
</html>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    private CurrentUser CurrentUser = new();
    private bool OpenMenu = false;
    private bool _loaded = false;
    private bool _loadedIconCart = false;

    private bool _justOpenedMenu = false;

    // Danh sách các địa chỉ URL cần hiển thị menu
    private readonly List<string> _menuUrls = new()
    {
        "/Lich-Su-Don-Hang",
        "/Dia-Chi",
        "/Thong-Tin-Tai-Khoan",
        "/Ma-Giam-Gia"
    };

    protected override async Task OnInitializedAsync()
    {
        _loaded = false;
        _loadedIconCart = false;

        Navigation.LocationChanged += OnLocationChanged;

        // Kiểm tra URL ngay khi khởi tạo
        CheckAndSetMenuState();
        _loaded = true;

        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loaded = false;

            CurrentUser = await UserService.GetCurrentUserAsync();

            // Kiểm tra lại URL sau khi render lần đầu
            CheckAndSetMenuState();
            _loadedIconCart = true;

            _loaded = true;
            StateHasChanged();
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Luôn kiểm tra và cập nhật menu state khi URL thay đổi
        var newPath = Navigation.ToBaseRelativePath(e.Location);
        var shouldShowMenu = ShouldOpenMenu(newPath);

        // Chỉ bỏ qua nếu vừa mới click menu và vẫn trong cùng trạng thái menu
        if (_justOpenedMenu && OpenMenu == shouldShowMenu)
        {
            _justOpenedMenu = false;
            return;
        }

        OpenMenu = shouldShowMenu;
        _justOpenedMenu = false;

        // Debug: In ra console để kiểm tra
        Console.WriteLine($"URL Changed - New Path: {newPath}, Open Menu: {OpenMenu}");

        StateHasChanged();
    }

    private void CheckAndSetMenuState()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        var shouldShowMenu = ShouldOpenMenu(currentPath);

        // Chỉ cập nhật nếu có thay đổi
        if (OpenMenu != shouldShowMenu)
        {
            OpenMenu = shouldShowMenu;
            Console.WriteLine($"Menu State Changed - Current Path: {currentPath}, Open Menu: {OpenMenu}");
        }
    }

    private bool ShouldOpenMenu(string url)
    {
        if (string.IsNullOrWhiteSpace(url))
            return false;

        // Chuẩn hóa URL: loại bỏ dấu '/' ở đầu và cuối, chuyển về lowercase
        url = url.Trim('/').ToLower();

        // Kiểm tra exact match hoặc starts with
        return _menuUrls.Any(menuUrl =>
        {
            var cleanMenuUrl = menuUrl.Trim('/').ToLower();

            // Kiểm tra exact match
            if (url == cleanMenuUrl)
                return true;

            // Kiểm tra nếu URL hiện tại bắt đầu bằng menu URL
            if (url.StartsWith(cleanMenuUrl + "/"))
                return true;

            return false;
        });
    }

    // Alternative method với regex pattern nếu cần phức tạp hơn
    private bool ShouldOpenMenuWithPattern(string url)
    {
        if (string.IsNullOrWhiteSpace(url))
            return false;

        url = url.Trim('/').ToLower();

        var patterns = new List<string>
        {
            @"^lich-su-don-hang.*",
            @"^dia-chi.*",
            @"^thong-tin-tai-khoan.*",
            @"^ma-giam-gia.*"
        };

        return patterns.Any(pattern =>
            System.Text.RegularExpressions.Regex.IsMatch(url, pattern,
                System.Text.RegularExpressions.RegexOptions.IgnoreCase));
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private void OpenMenuThongTin(bool result)
    {
        OpenMenu = result;
        _justOpenedMenu = true;
        StateHasChanged();

        // Reset flag sau một khoảng thời gian ngắn để tránh xung đột
        Task.Delay(100).ContinueWith(_ =>
        {
            _justOpenedMenu = false;
        });
    }

    private async Task Logout()
    {
        await ((Infrastructure.Service.CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        Navigation.NavigateTo("/", forceLoad: true);
    }
}