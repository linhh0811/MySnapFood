@using Service.SnapFood.Client.Components.Pages.Auth
@using Service.SnapFood.Share.Model.Commons
@using Microsoft.AspNetCore.Components.Authorization;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
<nav class="navbar navbar-expand-sm navbar-light bg-white fixed-top shadow-sm" style="z-index:1">
    <div class="container">
        <!-- Logo hoặc tiêu đề -->
        <a class="navbar-brand" href="#">Snap Food</a>

        <!-- Nút ba gạch ngang -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Menu -->
        <div class="collapse navbar-collapse fs-4" id="navbarNav">
            <ul class="navbar-nav mx-auto">
                <li class="nav-item">
                    <a class="nav-link " asp-area="" asp-controller="Home" asp-action="Index">Trang chủ</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link " asp-area="" asp-controller="Home" asp-action="OrderHome">Đặt hàng</a>
                </li>

            </ul>
            <!-- Nút Login -->
            @if (CurrentUser.UserId != Guid.Empty)
            {
                <ul class="navbar-nav navbar-right">
                    <FluentCounterBadge Count="1" Appearance="Appearance.Accent">
                        <FluentButton Appearance="Appearance.Stealth">
                            <FluentIcon Value="@(new Icons.Regular.Size24.Cart())" Color="@Color.Neutral" />
                        </FluentButton>
                    </FluentCounterBadge>
                    <FluentSpacer Width="15" />
                   @*  <FluentCounterBadge Count="0" Appearance="Appearance.Stealth">
                        <FluentButton Title="Giỏ hàng" Appearance="Appearance.Stealth">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Cart())" />
                        </FluentButton>
                    </FluentCounterBadge> *@
                  

                    <FluentButton Title="Thông tin người dùng" Appearance="Appearance.Stealth">
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Person())" Color="@Color.Neutral" />
                    </FluentButton>

                    <FluentSpacer Width="10" />

                    <FluentLabel Style="font-size:18px;" class="nav-link navbar-text">Xin chào, @CurrentUser.UserName</FluentLabel>

                    <FluentSpacer Width="10" />

                    <FluentButton Title="Đăng xuất" Appearance="Appearance.Outline" OnClick="Logout">
                        <FluentIcon Value="@(new Icons.Regular.Size24.SignOut())" />
                    </FluentButton>
                </ul>
            }
            else
            {
                <ul class="navbar-nav navbar-right">
                    <li class="nav-item">
                        <FluentButton Appearance="Appearance.Accent"
                                      Class="rounded-pill"
                                      OnClick="OpenModalAuth">
                            Đăng nhập/Đăng ký
                        </FluentButton>
                    </li>
                </ul>

            }

        </div>
    </div>
</nav>
@code {
    [CascadingParameter]
    public CurrentUser CurrentUser { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;

    private async Task OpenModalAuth()
    {
        try
        {
            var dialog = await DialogService.ShowDialogAsync<AuthDialog>(new DialogParameters
                {
                    Title = null,
                    PreventScroll = true,
                    Modal = true,
                    PreventDismissOnOverlayClick = false,
                    ShowDismiss = false,



                });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal: {ex.Message}");
        }
    }

    private async Task Logout()
    {

            await ((Infrastructure.Service.CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
            Navigation.NavigateTo("/", forceLoad: true);


    }

}