@using Service.SnapFood.Client.Components.Pages.Auth
@using Service.SnapFood.Share.Model.Commons
@using Microsoft.AspNetCore.Components.Authorization;
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient;
@using Service.SnapFood.Share.Interface.Extentions;
@using Service.SnapFood.Share;


@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ICallServiceRegistry CallApi

<nav class="navbar navbar-expand-sm navbar-light bg-white fixed-top shadow-sm" style="z-index:3">
    <div class="container">
        <a class="navbar-brand" href="/">
            <img src="/Images/LogoHumbeger3.png" alt="Snap Food Logo" height="35" style="width: auto;margin-right:25px;" />
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse fs-4" id="navbarNav">
            <ul class="navbar-nav mx-auto">
                <FluentNavLink Href="/"  Style="@(IsActive("/") ? "color:red; font-weight:600;" : "")">Trang chủ</FluentNavLink>
                <FluentSpacer Width="25" />
                <FluentNavLink Href="/Dat-Hang" Style="@(IsActive("/Dat-Hang") ? "color:red; font-weight:600;" : "")">Đặt hàng</FluentNavLink>
                @if (PromotionCount > 0)
                {
                    <FluentSpacer Width="25" />
                    <FluentNavLink Href="/Khuyen-Mai" Style="@(IsActive("/Khuyen-Mai") ? "color:red; font-weight:600;" : "")">Khuyến mãi</FluentNavLink>
                }
                
            </ul>
            @if (CurrentUser.UserId != Guid.Empty)
            {
                <ul class="navbar-nav navbar-right">

                    <FluentButton id="ThongTinNguoiDung" Title="Thông tin người dùng" Appearance="Appearance.Stealth" @onclick="@(() => openMenu = !openMenu)">
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Person())" Color="@Color.Neutral" />
                    </FluentButton>
                    <FluentMenu Anchor="ThongTinNguoiDung"
                    @bind-Open="openMenu"
                    VerticalThreshold="170">
                        <FluentMenuItem OnClick="@(() => OpenMenu("/Lich-Su-Don-Hang"))">
                            <FluentIcon Value="@(new Icons.Regular.Size20.History())" /> Lịch sử đơn hàng
                        </FluentMenuItem>

                        <FluentMenuItem OnClick="@(() => OpenMenu("/Dia-Chi"))"><FluentIcon Value="@(new Icons.Regular.Size20.Location())" /> Địa chỉ giao hàng</FluentMenuItem>
                        <FluentMenuItem OnClick="@(() => OpenMenu("/Ma-Giam-Gia"))"><FluentIcon Value="@(new Icons.Regular.Size20.Tag())" /> Mã giảm giá</FluentMenuItem>
                        <FluentMenuItem OnClick="@(() => OpenMenu("/Thong-Tin-Tai-Khoan"))"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" /> Thông tin tài khoản</FluentMenuItem>
                        <hr style="margin:8px" />
                        <FluentMenuItem OnClick="Logout"><FluentIcon Value="@(new Icons.Regular.Size20.SignOut())" /> Đăng xuất</FluentMenuItem>


                    </FluentMenu>


                    <FluentSpacer Width="10" />

                    <lable style="font-size:18px;font-weight:500;" class="nav-link navbar-text">Xin chào, @CurrentUser.UserName.Trim().Split(' ').Last()</lable>


                </ul>
            }
            else
            {
                <ul class="navbar-nav navbar-right">

                    <FluentButton Appearance="Appearance.Lightweight"
                    OnClick="OpenModalAuth"
                    IconEnd="@(new Icons.Regular.Size20.SignOut())">
                        <FluentLabel Style="font-size:18px;font-weight:500;color: #6a6f8c;">Đăng nhập</FluentLabel>
                    </FluentButton>


                </ul>
            }
        </div>
    </div>
</nav>

@code {
    [CascadingParameter]
    public CurrentUser CurrentUser { get; set; } = new();

    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    private bool openMenu = false;
    [Parameter]
    public EventCallback<bool> OpenMenuThongTin { get; set; }
    int PromotionCount = 0;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await OpenMenuThongTin.InvokeAsync(false);
            await GetDiscountHoatDong();
        }
        catch (Exception ex)
        {
            
            ToastService.ShowError($"Lỗi khi khởi tạo NavMenu: {ex.Message}");
        }
      

    }

    private async Task GetDiscountHoatDong()
    {
        ApiRequestModel requestRestAPI = new ApiRequestModel() { };

        requestRestAPI.Endpoint = $"api/Promotion/GetPromotionActivateCount";
        ResultAPI result = await CallApi.Get<int>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            PromotionCount = result.Data is not null ? (int)result.Data :  0;
        }
       
    }

    private async Task OpenModalAuth()
    {
        try
        {
            var dialog = await DialogService.ShowDialogAsync<AuthDialog>(new DialogParameters
                {
                    Title = null,
                    PreventScroll = true,
                    Modal = true,
                    PreventDismissOnOverlayClick = false,
                    ShowDismiss = false
                });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal: {ex.Message}");
        }
    }

    private async Task Logout()
    {

        await ((Infrastructure.Service.CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        Navigation.NavigateTo("/", forceLoad: true);
    }
    private async Task OpenMenu(string Url)
    {
        openMenu = false;
        await OpenMenuThongTin.InvokeAsync(true);
        Navigation.NavigateTo(Url);
        StateHasChanged();


    }

   
    private bool IsActive(string href)
    {
        var currentPath = new Uri(Navigation.Uri).AbsolutePath.ToLower();
        if (href!="/")
        {
            return currentPath.Contains(href.ToLower());
        }
        return currentPath == href.ToLower();
    }
}