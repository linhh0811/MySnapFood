@using Service.SnapFood.Client.Components.Pages.Auth
@using Service.SnapFood.Share.Model.Commons
@using Microsoft.AspNetCore.Components.Authorization;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
<nav class="navbar navbar-expand-sm navbar-light bg-white fixed-top shadow-sm" style="z-index:1">
    <div class="container">
        <!-- Logo hoặc tiêu đề -->
        <a class="navbar-brand" href="#">Snap Food</a>

        <!-- Nút ba gạch ngang -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Menu -->
        <div class="collapse navbar-collapse fs-4" id="navbarNav">
            <ul class="navbar-nav mx-auto">
                <FluentNavLink Href="/">Trang chủ</FluentNavLink>

                <FluentSpacer Width="15" />

                <FluentNavLink Href="/Order-Home">Đặt hàng</FluentNavLink>

            </ul>
            <!-- Nút Login -->
            @if (CurrentUser.UserId != Guid.Empty)
            {
                <ul class="navbar-nav navbar-right">
                    <FluentCounterBadge Count="1" Appearance="Appearance.Accent">
                        <FluentButton Title="Giỏ hàng" Appearance="Appearance.Stealth" >
                            <FluentIcon Value="@(new Icons.Regular.Size24.Cart())" Color="@Color.Neutral" />
                        </FluentButton>
                    </FluentCounterBadge>
                    <FluentSpacer Width="15" />

                    <FluentButton id="ThongTinNguoiDung" Title="Thông tin người dùng" Appearance="Appearance.Stealth" @onclick="@(() => openMenu = !openMenu)">
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Person())" Color="@Color.Neutral" />
                    </FluentButton>
                    <FluentMenu Anchor="ThongTinNguoiDung"
                    @bind-Open="openMenu"
                    VerticalThreshold="170">
                        <FluentMenuItem OnClick="OpenMenu"><FluentIcon Value="@(new Icons.Regular.Size20.History())"/> Lịch sử đơn hàng</FluentMenuItem>
                        <FluentMenuItem OnClick="OpenMenu"><FluentIcon Value="@(new Icons.Regular.Size20.Location())" /> Địa chỉ giao hàng</FluentMenuItem>
                        <FluentMenuItem OnClick="OpenMenu"><FluentIcon Value="@(new Icons.Regular.Size20.Tag())" /> Mã giảm giá</FluentMenuItem>
                        <FluentMenuItem OnClick="OpenMenu"><FluentIcon Value="@(new Icons.Regular.Size20.Person())" /> Thông tin tài khoản</FluentMenuItem>
                        <hr style="margin:8px" />
                        <FluentMenuItem OnClick="Logout"><FluentIcon Value="@(new Icons.Regular.Size20.SignOut())" /> Đăng xuất</FluentMenuItem>


                    </FluentMenu>


                    <FluentSpacer Width="10" />

                    <FluentLabel Style="font-size:18px;font-weight:500;" class="nav-link navbar-text">Xin chào, @CurrentUser.UserName.Trim().Split(' ').Last()</FluentLabel>

                </ul>
            }
            else
            {
                <ul class="navbar-nav navbar-right">
                    <FluentButton Appearance="Appearance.Lightweight"
                    OnClick="OpenModalAuth"
                    IconEnd="@(new Icons.Regular.Size20.SignOut())">
                        <FluentLabel Style="font-size:18px;font-weight:500;color: #6a6f8c;">Đăng nhập</FluentLabel>
                    </FluentButton>

                </ul>

            }

        </div>
    </div>
</nav>
@code {
    [CascadingParameter]
    public CurrentUser CurrentUser { get; set; } = new();
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    private bool openMenu = false;
    [Parameter]
    public EventCallback<bool> OpenMenuThongTin { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await OpenMenuThongTin.InvokeAsync(false);
        StateHasChanged();
        var a = CurrentUser.UserId;

    
    }

    private async Task OpenModalAuth()
    {
        try
        {
            var dialog = await DialogService.ShowDialogAsync<AuthDialog>(new DialogParameters
                {
                    Title = null,
                    PreventScroll = true,
                    Modal = true,
                    PreventDismissOnOverlayClick = false,
                    ShowDismiss = false,



                });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal: {ex.Message}");
        }
    }

    private async Task Logout()
    {

        await ((Infrastructure.Service.CustomAuthenticationStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        Navigation.NavigateTo("/", forceLoad: true);


    }
    private async Task OpenMenu()
    {
        openMenu = false;
        await OpenMenuThongTin.InvokeAsync(true);
        StateHasChanged();

       
    }

}