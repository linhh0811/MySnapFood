
@using Service.SnapFood.Client.Components.Pages.Auth
@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Bill
@using Service.SnapFood.Client.Dto.Cart
@using Service.SnapFood.Client.Dto.Combo
@using Service.SnapFood.Client.Dto.Product
@using Service.SnapFood.Client.Dto.Promotion
@using Service.SnapFood.Client.Enums
@using Service.SnapFood.Client.Infrastructure.Service
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.Commons
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using System.Timers
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid
@using System.Text.Json
@inject SharedStateService SharedService
@if (isLoading)
{
    <div class="loading-center">
        Đang tải...
    </div>
}
else
{
    if (promotionDtos.Any())
    {
        <h2 class="mb-3 fw-bold text-center text-uppercase">⚡ SẢN PHẨM COMBO ĐANG KHUYẾN MÃI</h2>

        <hr>
        @foreach (var item in promotionDtos)
        {
            <section id="@item.Id" class="py-3">
                <div class="row">
                    @foreach (var i in item.PromotionItems)
                    {

                        decimal priceEndown = i.BasePrice;
                        if (item.PromotionType == PromotionType.Amount)
                        {
                            priceEndown = i.BasePrice - item.PromotionValue;
                        }
                        else if (item.PromotionType == PromotionType.FixedPrice)
                        {
                            priceEndown = item.PromotionValue;
                        }

                        @if (i.ItemType == ItemType.Product)
                        {
                            <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                                <FluentCard class="h-100 position-relative" style="min-height: 380px;">
                                    <img src="@i.ImageUrl" style="height: 200px; object-fit: cover; width: 100%;" alt="@i.ItemName" />
                                    <div style="padding: 0; min-height: 100px; display: flex; flex-direction: column; justify-content: space-between;">
                                        <div>
                                            <FluentLabel Typo="Typography.H5" Style="padding-bottom:10px;">@i.ItemName</FluentLabel>
                                            @if (!string.IsNullOrEmpty(i.SizeName))
                                            {
                                                <p class="card-title" style="margin: 0;padding:0px;padding-bottom:20px;">@i.SizeName</p>
                                            }
                                            else if (!string.IsNullOrEmpty(i.CategoryName))
                                            {
                                                <p class="card-title" style="margin: 0;padding:0px;">@i.CategoryName</p>

                                            }
                                        </div>

                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            <FluentLabel Typo="Typography.H6" Style="color: red; text-decoration: line-through;">
                                                @i.BasePrice.ToString("N0") đ
                                            </FluentLabel>

                                            @if (i.BasePrice > priceEndown)
                                            {
                                                var discountPercent = Math.Round(((i.BasePrice - priceEndown) / i.BasePrice) * 100);
                                                <FluentLabel Typo="Typography.H6" Style="color: green;">
                                                    -@discountPercent%
                                                </FluentLabel>
                                            }
                                        </div>
                                    </div>
                                    <div style="position: absolute; bottom: 0; left: 0; display: flex; align-items: center; gap: 10px; padding: 20px; width: 100%;">
                                        <FluentLabel Typo="Typography.H4" Style="color: red; font-weight: bold;">
                                            @priceEndown.ToString("N0") đ
                                        </FluentLabel>
                                        <FluentButton BackgroundColor="#ff5b6a"
                                        Color="white"
                                        Title="Thêm sản phẩm"
                                        Style="padding: 0; margin-left: auto;"
                                        Type="ButtonType.Submit" OnClick="()=>HandleClick(i.ItemId,i.SizeName)"
                                        Disabled=!item.IsDangKM>
                                            +
                                        </FluentButton>
                                    </div>
                                </FluentCard>
                            </div>
                        }
                        else if (i.ItemType == ItemType.Combo)
                        {
                            <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                                <FluentCard class="h-100 position-relative" style="min-height: 400px;">
                                    <img src="@i.ImageUrl" style="height: 200px; object-fit: cover; width: 100%;" alt="@i.ItemName" />
                                    <div style=" min-height: 120px;display: flex; flex-direction: column; justify-content: space-between;padding-bottom:40px;">
                                        <div>
                                            <FluentLabel Typo="Typography.H5" Style="padding-bottom:10px">@i.ItemName</FluentLabel>
                                            @foreach (var item in i.ComboItems)
                                            {
                                                <p class="card-title" style="margin: 0;">@item.ProductName</p>
                                            }
                                        </div>
                                        <div style="display: flex; align-items: center; gap: 10px; padding-top:10px;">
                                            <FluentLabel Typo="Typography.H6" Style="color: red; text-decoration: line-through;">
                                                @i.BasePrice.ToString("N0") đ
                                            </FluentLabel>
                                            @if (i.BasePrice > priceEndown)
                                            {
                                                var discountPercent = Math.Round(((i.BasePrice - priceEndown) / i.BasePrice) * 100);
                                                <FluentLabel Typo="Typography.H6" Style="color: green;">
                                                    -@discountPercent%
                                                </FluentLabel>
                                            }
                                        </div>
                                    </div>
                                    <div style="position: absolute; bottom: 0; left: 0; display: flex; align-items: center; gap: 10px; padding: 20px; width: 100%;">
                                        <FluentLabel Typo="Typography.H4" Style="color: red; font-weight: bold;">
                                            @priceEndown.ToString("N0") đ
                                        </FluentLabel>
                                        <FluentButton BackgroundColor="#ff5b6a"
                                        Color="white"
                                        Title="Thêm combo"
                                        Style="padding: 0; margin-left: auto;"
                                        Type="ButtonType.Submit"
                                        OnClick="()=>OpenModalComboAdd(i.ItemId)"
                                        Disabled=!item.IsDangKM>
                                            +
                                        </FluentButton>
                                    </div>
                                </FluentCard>
                            </div>
                        }


                    }
                </div>
            </section>

        }
    }

    @if (ProductDto.Any())
    {
        <section class="py-4">
            <h2 class="mb-3 fw-bold text-center text-uppercase">🔥 TOP SẢN PHẨM BÁN CHẠY</h2>
            <div class="row">
                @if (ProductDto == null || !ProductDto.Any())
                {
                    <p class="text-center text-muted">Chưa có dữ liệu.</p>
                }
                else
                {
                    @foreach (var product in ProductDto)
                    {
                        <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                            <FluentCard class="h-100 position-relative" style="min-height: 400px;">
                                <img src="@product.ImageUrl" style="height: 200px; object-fit: cover; width: 100%;" alt="@product.ProductName" />
                                <div style="padding: 0; min-height: 100px; display: flex; flex-direction: column; justify-content: space-between;">
                                    <div>
                                        <FluentLabel Typo="Typography.H5" Style="padding-bottom:10px;">@product.ProductName</FluentLabel>
                                        @if (!string.IsNullOrEmpty(product.SizeName))
                                        {
                                            <p class="card-title" style="margin: 0;padding:0px;padding-bottom:20px;">@product.SizeName</p>
                                        }
                                        else if (!string.IsNullOrEmpty(product.CategoryName))
                                        {
                                            <p class="card-title" style="margin: 0;padding:0px;">@product.CategoryName</p>

                                        }
                                    </div>
                                    <p class="text-muted mb-1" style="font-size: 13px;">
                                        Đã bán: <b>@product.Quantity</b>
                                    </p>
                                    @if (product.PriceEndown > 0)
                                    {
                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            <FluentLabel Typo="Typography.H6" Style="color: red; text-decoration: line-through;">
                                                @product.BasePrice.ToString("N0") đ
                                            </FluentLabel>

                                            @if (product.BasePrice > product.PriceEndown)
                                            {
                                                var discountPercent = Math.Round(((product.BasePrice - product.PriceEndown) / product.BasePrice) * 100);
                                                <FluentLabel Typo="Typography.H6" Style="color: green;">
                                                    -@discountPercent%
                                                </FluentLabel>
                                            }
                                        </div>
                                    }

                                </div>
                                <div style="position: absolute; bottom: 0; left: 0; display: flex; align-items: center; gap: 10px; padding: 20px; width: 100%;">
                                    <FluentLabel Typo="Typography.H4" Style="color: red; font-weight: bold;">
                                        @if (product.PriceEndown > 0)
                                        {
                                            <span>@product.PriceEndown.ToString("N0") đ</span>
                                        }
                                        else
                                        {
                                            <span>@product.BasePrice.ToString("N0") đ</span>

                                        }

                                    </FluentLabel>
                                    <FluentButton BackgroundColor="#ff5b6a"
                                    Color="white"
                                    Title="Thêm sản phẩm"
                                    Style="padding: 0; margin-left: auto;"
                                    Type="ButtonType.Submit"
                                    OnClick="()=>HandleClick(product.Id,product.SizeId)">
                                        +
                                    </FluentButton>
                                </div>
                            </FluentCard>
                        </div>

                    }
                }
            </div>
        </section>

    }




    @if (ComboDto.Any())
    {
        <section class="py-4">
            <h2 class="mb-3 fw-bold text-center text-uppercase">🔥 TOP COMBO BÁN CHẠY</h2>
            <div class="row">
                @if (ComboDto == null || !ComboDto.Any())
                {
                    <p class="text-center text-muted">Chưa có dữ liệu.</p>
                }
                else
                {
                    @foreach (var combo in ComboDto)
                    {
                        <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                            <FluentCard class="h-100 position-relative" style="min-height: 420px;">
                                <img src="@combo.ImageUrl" style="height: 200px; object-fit: cover; width: 100%;" alt="@combo.ComboName" />
                                <div style=" min-height: 120px;display: flex; flex-direction: column; justify-content: space-between;padding-bottom:40px;">
                                    <div>
                                        <FluentLabel Typo="Typography.H5" Style="padding-bottom:10px">@combo.ComboName</FluentLabel>
                                        @foreach (var item in combo.ComboItems)
                                        {
                                            <p class="card-title" style="margin: 0;">@item.ProductName</p>
                                        }
                                    </div>
                                    <p class="text-muted mb-1" style="font-size: 13px;">
                                        Đã bán: <b>@combo.Quantity</b>
                                    </p>
                                    @if (combo.PriceEndown > 0)
                                    {
                                        <div style="display: flex; align-items: center; gap: 10px; padding-top:10px;">
                                            <FluentLabel Typo="Typography.H6" Style="color: red; text-decoration: line-through;">
                                                @combo.BasePrice.ToString("N0") đ
                                            </FluentLabel>
                                            @if (combo.BasePrice > combo.PriceEndown)
                                            {
                                                var discountPercent = Math.Round(((combo.BasePrice - combo.PriceEndown) / combo.BasePrice) * 100);
                                                <FluentLabel Typo="Typography.H6" Style="color: green;">
                                                    -@discountPercent%
                                                </FluentLabel>
                                            }
                                        </div>
                                    }

                                </div>
                                <div style="position: absolute; bottom: 0; left: 0; display: flex; align-items: center; gap: 10px; padding: 20px; width: 100%;">
                                    <FluentLabel Typo="Typography.H4" Style="color: red; font-weight: bold;">
                                        @if (combo.PriceEndown > 0)
                                        {
                                            <span>@combo.PriceEndown.ToString("N0") đ</span>
                                        }
                                        else
                                        {
                                            <span>@combo.BasePrice.ToString("N0") đ</span>

                                        }

                                    </FluentLabel>
                                    <FluentButton BackgroundColor="#ff5b6a"
                                    Color="white"
                                    Title="Thêm combo"
                                    Style="padding: 0; margin-left: auto;"
                                    Type="ButtonType.Submit"
                                    OnClick="()=>OpenModalComboAdd(combo.Id)">
                                        +
                                    </FluentButton>
                                </div>
                            </FluentCard>
                        </div>
                    }
                }
            </div>
        </section>
    }


}




@code {
    [CascadingParameter]
    public CurrentUser CurrentUser { get; set; } = new();
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private List<PromotionDto> promotionDtos = new List<PromotionDto>();

    private bool isLoading = true;
    private Timer? Timer;
    private List<ProductDto> ProductDto = new List<ProductDto>();
    private List<ComboDto> ComboDto = new List<ComboDto>();


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await GetPromotion();
        await LoadProduct();
        await LoadCombo();

        isLoading = false;
        Timer = new Timer(1000);
        Timer.Elapsed += UpdateTimer;
        Timer.AutoReset = true; // Lặp lại mỗi giây
        Timer.Start();

        // Cập nhật lần đầu
        UpdateTimer(null, null);
    }

    private void UpdateTimer(object? sender, ElapsedEventArgs? e)
    {

        // Cập nhật giao diện
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Hủy Timer khi component bị hủy
        Timer?.Dispose();
    }
    private async Task LoadProduct()
    {

        try
        {
            var baseQuery = new BaseQuery
                {

                    gridRequest = new GridRequest
                    {
                        page = 1,
                        pageSize = int.MaxValue,

                    }
                };
            requestRestAPI.Endpoint = "api/Product/GetPaged";

            ResultAPI result = await CallApi.Post<Dto.DataTableJson>(requestRestAPI, baseQuery);
            if (result.Status == StatusCode.OK && result.Data is Dto.DataTableJson dataTable)
            {
                var items = JsonSerializer.Deserialize<List<ProductDto>>(dataTable.Data.GetRawText(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<ProductDto>();

                ProductDto = items
                            .Where(x => x.ModerationStatus == ModerationStatus.Approved&&x.Quantity>=5)
                            .OrderByDescending(x => x.Quantity)
                            .Take(8)
                            .ToList();

            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách sản phẩm: {ex.Message}");
        }
    }


    private async Task LoadCombo()
    {

        try
        {
            var baseQuery = new BaseQuery
                {

                    gridRequest = new GridRequest
                    {
                        page = 1,
                        pageSize = int.MaxValue,

                    }
                };
            requestRestAPI.Endpoint = "api/Combo/GetPaged";

            ResultAPI result = await CallApi.Post<Dto.DataTableJson>(requestRestAPI, baseQuery);
            if (result.Status == StatusCode.OK && result.Data is Dto.DataTableJson dataTable)
            {
                var items = JsonSerializer.Deserialize<List<ComboDto>>(dataTable.Data.GetRawText(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<ComboDto>();

               
                ComboDto = items
                            .Where(x => x.ModerationStatus == ModerationStatus.Approved && x.Quantity >= 5)
                            .OrderByDescending(x => x.Quantity)
                            .Take(8)
                            .ToList();


            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách sản phẩm: {ex.Message}");
        }
    }

    private async Task GetPromotion()
    {
        requestRestAPI.Endpoint = $"api/Promotion/Hd";
        ResultAPI result = await CallApi.Get<List<PromotionDto>>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            promotionDtos = result.Data as List<PromotionDto> ?? new List<PromotionDto>();
        }
        else
        {
            ToastService.ShowError("Không thể tải thông tin khuyến mãi.");
        }
    }

 


    private async Task OpenModalComboAdd(Guid id)
    {
        try
        {
            if (CurrentUser.UserId == Guid.Empty)
            {
                await OpenModalAuth();
            }
            else
            {
                var parameters = new ViewParameters
                    {
                        Id = id,
                    };
                var dialog = await DialogService.ShowDialogAsync<Combo.View>(parameters, new DialogParameters
                    {
                        Title = "Thêm Combo",
                        PreventDismissOnOverlayClick = true,
                        PreventScroll = true,
                        Modal = true,
                        Width = "900px",
                        ShowTitle = false,
                        ShowDismiss = false

                    });
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal thêm sản phẩm: {ex.Message}");
        }
    }
    private async Task OpenModalProductAdd(Guid id)
    {
        try
        {
            var parameters = new ViewParameters
                {
                    Id = id,

                };
            var dialog = await DialogService.ShowDialogAsync<Product.View>(parameters, new DialogParameters
                {
                    Title = "Thêm sản phẩm",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                    Modal = true,
                    Width = "800px",
                    ShowTitle = false,
                    ShowDismiss = false

                });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal thêm sản phẩm: {ex.Message}");
        }
    }
    private async Task HandleClick(Guid productId, string? sizeName)
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            await OpenModalAuth();
        }
        else
        {
            if (!string.IsNullOrEmpty(sizeName))
            {
                await OpenModalProductAdd(productId);
            }
            else
            {
                await AddProductToCart(productId);
            }
        }
    }


    private async Task AddProductToCart(Guid productId)
    {
        try
        {
            if (CurrentUser.UserId == Guid.Empty)
            {
                await OpenModalAuth();
            }
            else
            {

                requestRestAPI.Endpoint = "api/Cart/AddProductToCart";

                AddProductToCartDto AddProductToCartDto = new AddProductToCartDto
                    {
                        ProductId = productId,
                        UserId = CurrentUser.UserId,
                        Quantity = 1
                    };
                var result = await CallApi.Post<object>(requestRestAPI, AddProductToCartDto);

                // Xử lý kết quả từ API
                if (result.Status == StatusCode.OK)
                {
                    await SharedService.TriggerUpdateAsync();
                    ToastService.ShowSuccess("Đã thêm sản phẩm vào giỏ hàng.");
                }
                else
                {
                    ToastService.ShowError($"Không thể thêm sản phẩm: {result.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi: {ex.Message}");
        }
    }

    private async Task OpenModalAuth()
    {
        try
        {
            var dialog = await DialogService.ShowDialogAsync<AuthDialog>(new DialogParameters
                {
                    Title = null,
                    PreventScroll = true,
                    Modal = true,
                    PreventDismissOnOverlayClick = false,
                    ShowDismiss = false
                });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal: {ex.Message}");
        }
    }
}
