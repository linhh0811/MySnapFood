
@using Microsoft.FluentUI.AspNetCore.Components
@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Addresss
@using Service.SnapFood.Client.Infrastructure.Service
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.Commons
@using Service.SnapFood.Share.Model.Enum
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using System.Text.Json.Serialization
@inject HttpClient Http
@inherits ComponentBase
@implements IDialogContentComponent<EditOrUpdateParameters>


<FluentDialog @ref="Dialog" Modal="true" TrapFocus="true" Style="width: 500px;">
    <FluentDialogHeader>
        <h3>@(Content.IsEditMode ? "Sửa địa chỉ" : "Thêm mới địa chỉ")</h3>
    </FluentDialogHeader>

    <EditForm Model="AddressModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <FluentMessageBar Title="Lỗi" Intent="@MessageIntent.Error">
                @ErrorMessage
            </FluentMessageBar>
        }
        <FluentStack Orientation="Orientation.Vertical" Gap="15">
            <div class="row" style="width:100%; margin:0;">
                <div class="mb-3 col-md-6" style="padding-right:10px;padding-left:0;">
                    <FluentTextField Placeholder="Họ và tên" @bind-Value="AddressModel.FullName" Style="width:100%;" />
                    <br/>
                    <ValidationMessage style="color:red" For="@(() => AddressModel.FullName)" />

                </div>
                <div class="mb-3  col-md-6" style="padding-left:10px;padding-right:0;">
                    <FluentTextField Placeholder="Số điện thoại" @bind-Value="AddressModel.NumberPhone" Style="width:100%;" />
                    <br />

                    <ValidationMessage style="color:red" For="@(() => AddressModel.NumberPhone)" />

                </div>
            </div>
            <div class="row" style="width:100%;margin:0;">
                <div class="mb-3 col-md-6" style="padding-right:10px;padding-left:0;">

                    <FluentSelect @bind-Value="SelectedProvince"
                    @bind-Value:after="OnProvinceChangedAsync"
                    TOption="string" Width="100%" Height="250px">
                        <FluentOption Value="">Tỉnh/Thành phố</FluentOption>
                        @foreach (var province in provinces)
                        {
                            <FluentOption Value="@province.Code.ToString()">@province.Name</FluentOption>
                        }
                    </FluentSelect>
                    <br />

                    <ValidationMessage style="color:red" For="@(() => AddressModel.Province)" />

                </div>
                <div class="mb-3 col-md-6" style="padding-left:10px;padding-right:0;">
                    <FluentSelect @bind-Value="SelectedDistrict"
                    @bind-Value:after="OnDistrictChangedAsync"
                    TOption="string" Width="100%" Height="250px">
                        <FluentOption Value="">Quận/Huyện</FluentOption>
                        @foreach (var district in districts)
                        {
                            <FluentOption Value="@district.Code.ToString()">@district.Name</FluentOption>
                        }
                    </FluentSelect>
                    <br />

                    <ValidationMessage style="color:red" For="@(() => AddressModel.District)" />

                </div>
            </div>
            <div class="mb-3" style="width:100%">
                <FluentSelect @bind-Value="SelectedWard" @bind-Value:after="OnWardChangedAsync"
                TOption="string" Width="100%" Height="250px">
                    <FluentOption Value="">Phường/Xã</FluentOption>
                    @foreach (var ward in wards)
                    {
                        <FluentOption Value="@ward.Code.ToString()">@ward.Name</FluentOption>
                    }
                </FluentSelect>
                <br />

                <ValidationMessage style="color:red" For="@(() => AddressModel.Ward)" />

            </div>
            <div class="mb-3" style="width:100%">
                <FluentTextField @bind-Value="AddressModel.SpecificAddress" Placeholder="Địa chỉ cụ thể" Style="width:100%;" />
                <br />

                <ValidationMessage style="color:red" For="@(() => AddressModel.SpecificAddress)" />

            </div>


            <FluentTextArea @bind-Value="AddressModel.Description" Placeholder="Ghi chú về địa chỉ(nếu có)" Label="" Rows=3 Style="width:100%;" />

            <FluentCheckbox @bind-Value="IsDiaChiMacDinh" Disabled="IsMacDinh">Đặt làm địa chỉ mặc định</FluentCheckbox>


            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" Gap="10">
                <FluentButton Appearance="Appearance.Neutral" @onclick="HideDialog" Disabled="@isSaving">Hủy</FluentButton>
                <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span style="margin-left: 8px;">Đang lưu...</span>
                    }
                    else
                    {
                        <span>Lưu</span>
                    }
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </EditForm>
</FluentDialog>
@code {
    [CascadingParameter] public CurrentUser CurrentUser { get; set; } = new();

    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public EditOrUpdateParameters Content { get; set; } = new();
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private AddressDto AddressModel { get; set; } = new AddressDto();
    private string? ErrorMessage;
    private bool isSaving = false;
    private bool IsDiaChiMacDinh = false;
    private bool IsMacDinh = false;



    protected override async Task OnInitializedAsync()
    {      
        await LoadProvinces();
        await GetAddress();
    }

    private async Task GetAddress()
    {
        if (Content.IsEditMode)
        {
            requestRestAPI.Endpoint = $"api/Address/{Content.Id}";
            ResultAPI result = await CallApi.Get<AddressDto>(requestRestAPI);
            if (result.Status == StatusCode.OK)
            {
                AddressModel = result.Data as AddressDto ?? new AddressDto();
                if (AddressModel.AddressType==AddressType.Default)
                {
                    IsDiaChiMacDinh = true;
                    IsMacDinh = true;
                }
                var Province = provinces.FirstOrDefault(p => p.Name.ToString() == AddressModel.Province);
                SelectedProvince = Province?.Code.ToString() ?? string.Empty;
                await OnProvinceChangedAsync();
                var District = districts.FirstOrDefault(p => p.Name.ToString() == AddressModel.District);
                SelectedDistrict = District?.Code.ToString() ?? string.Empty;
                await OnDistrictChangedAsync();
                var Ward = wards.FirstOrDefault(p => p.Name.ToString() == AddressModel.Ward);
                SelectedWard = Ward?.Code.ToString() ?? string.Empty;
            }
            
        }
    }

    private async Task<bool> Create(AddressDto createRequest)
    {
        ErrorMessage = null;
        try
        {

            isSaving = true;
            requestRestAPI.Endpoint = "api/Address";
            if (IsDiaChiMacDinh)
            {
                createRequest.AddressType = AddressType.Default;
            }
            else
            {
                createRequest.AddressType = AddressType.Normal;
            }
            createRequest.UserId = CurrentUser.UserId;
            ResultAPI result = await CallApi.Post<AddressDto>(requestRestAPI, createRequest);
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Thêm địa chỉ thành công.");
                return true;
            }
            else
            {
                isSaving = false;
                ErrorMessage = "Thêm địa chỉ thất bại: " + result.Message;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSaving = false;
            ErrorMessage = "Thêm địa chỉ thất bại: " + ex.Message;
            return false;
        }
    }

    private async Task<bool> Update(Guid id, AddressDto updateRequest)
    {
        ErrorMessage = null;
        try
        {
            isSaving = true;
            requestRestAPI.Endpoint = $"api/Address/{id}";
            if (IsDiaChiMacDinh)
            {
                updateRequest.AddressType = AddressType.Default;
            }
            else
            {
                updateRequest.AddressType = AddressType.Normal;
            }
            ResultAPI result = await CallApi.Put(requestRestAPI, updateRequest);
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Sửa địa chỉ thành công.");
                return true;
            }
            else
            {
                isSaving = false;
                ErrorMessage = "Sửa địa chỉ thất bại: " + result.Message;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSaving = false;
            ErrorMessage = "Sửa địa chỉ thất bại: " + ex.Message;
            return false;
        }
    }


    private async Task HandleSubmit()
    {
        bool result = false;

        if (Content.IsEditMode)
        {
            result = await Update(Content.Id, AddressModel);
        }
        else
        {
            result = await Create(AddressModel);
        }

        if (result)
        {
            await Dialog.CloseAsync();
            await Content.OnRefresh.InvokeAsync();
        }

    }
    private async Task HideDialog()
    {
        await Dialog.CloseAsync();
    }


    private List<ProvinceResponse> provinces = new();
    private List<District> districts = new();
    private List<Ward> wards = new();
    private string SelectedProvince = string.Empty;
    private string SelectedDistrict = string.Empty;
    private string SelectedWard = string.Empty;




    private async Task LoadProvinces()
    {
        provinces = await Http.GetFromJsonAsync<List<ProvinceResponse>>("https://provinces.open-api.vn/api/?depth=2") ?? new();
    }

    private async Task OnProvinceChangedAsync()
    {
        try
        {
             SelectedDistrict = string.Empty;
             SelectedWard = string.Empty;
            districts = new List<District>();

            if (!string.IsNullOrEmpty(SelectedProvince))
            {
                // Lấy toàn bộ response trước
                var response = await Http.GetFromJsonAsync<ProvinceResponse>(
                    $"https://provinces.open-api.vn/api/p/{SelectedProvince}?depth=2");

                // Lấy danh sách districts từ response
                districts = response?.Districts ?? new List<District>();

                var selectedProvince = provinces.FirstOrDefault(p => p.Code.ToString() == SelectedProvince);
                AddressModel.Province = selectedProvince?.Name ?? string.Empty;
            }
            else
            {
                AddressModel.Province = string.Empty;
                AddressModel.District = string.Empty;
                AddressModel.Ward = string.Empty;
            }
        
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading districts: {ex.Message}");
            ErrorMessage = "Không thể tải danh sách quận/huyện";
        }

        
    }

    private async Task OnDistrictChangedAsync()
    {
        // Reset giá trị phường/xã
        SelectedWard = string.Empty;

        if (!string.IsNullOrEmpty(SelectedDistrict))
        {

            var response = await Http.GetFromJsonAsync<District>(
                 $"https://provinces.open-api.vn/api/d/{SelectedDistrict}?depth=2");

            // Lấy danh sách districts từ response
            wards = response?.Wards ?? new List<Ward>();
            var selectedDistrict = districts.FirstOrDefault(p => p.Code.ToString() == SelectedDistrict);
            AddressModel.District = selectedDistrict?.Name ?? string.Empty;
        }
        else
        {
            wards = new List<Ward>();
            AddressModel.District = string.Empty;
            AddressModel.Ward = string.Empty;
        }

        StateHasChanged();
    }

    private void OnWardChangedAsync()
    {

        if (!string.IsNullOrEmpty(SelectedWard))
        {
            var selectedWard = wards.FirstOrDefault(p => p.Code.ToString() == SelectedWard);
            AddressModel.Ward = selectedWard?.Name ?? string.Empty;
        }
        else
        {
            AddressModel.Ward = string.Empty;
        }

        StateHasChanged();
    }

    public class ProvinceResponse
    {
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("code")]
        public int Code { get; set; }

        [JsonPropertyName("districts")]
        public List<District> Districts { get; set; } = new();
    }

    public class District
    {
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("code")]
        public int Code { get; set; }

        [JsonPropertyName("wards")]
        public List<Ward> Wards { get; set; } = new();
    }

    public class Ward
    {
        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("code")]
        public int Code { get; set; }
    }
}