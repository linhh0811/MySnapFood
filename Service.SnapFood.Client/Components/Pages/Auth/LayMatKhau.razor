@using Microsoft.AspNetCore.Components.Authorization
@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Auth
@using Service.SnapFood.Client.Infrastructure.Service
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@inject NavigationManager Navigation




@implements IDialogContentComponent<RegisterDto>
@inject AuthenticationStateProvider AuthenticationStateProvider


<body>
    <FluentDialog PreventDismissOnOverlayClick="false">
        <FluentDialogBody>
            <div class="login-wrap">
                <button Class="close-button"
                        @onclick="@(() => Dialog.CloseAsync())">
                    <span>X</span>
                </button>
                <div class="login-html">
                    <input id="tab-1" type="radio" name="tab" class="sign-in" checked><label for="tab-1" class="tab">Lấy lại mật khẩu</label>

                    <input id="tab-2" type="radio" name="tab" class="sign-up"><label for="tab-2" class="tab"></label>
                    <div class="login-form">
                        <div class="sign-in-htm">
                            <EditForm Model="layMatKhauDto" OnValidSubmit="Confirm">

                                <DataAnnotationsValidator />

                                @if (forgotStep == 1)
                                {
                                    <div class="group">
                                        <label class="form-label">Email</label>
                                        <InputText class="form-control" @bind-Value="layMatKhauDto.Email" />
                                        <ValidationMessage style="color:red ;margin-top:10px;" For="@(() => layMatKhauDto.Email)" />
                                    </div>

                                    <div id="recaptcha-container" class="recaptcha-box"></div>

                                    <div class="group" style="display: flex; gap: 10px;">
                                        <FluentButton @onclick="SendOTPAsync"
                                                      Disabled="@isSendingOTP"
                                                      Loading="@IsLoading"
                                                      Appearance="Appearance.Accent"
                                                      Style="width: 100%;height:37px;">
                                            @(isSendingOTP ? $"Gửi lại ({countdown}s)" : (otpSent ? "Gửi lại mã" : "Gửi mã OTP"))
                                        </FluentButton>
                                    </div>

                                    @if (otpSent)
                                    {
                                        <div class="group">
                                            <label class="form-label">Mã xác nhận</label>
                                            <InputText class="form-control" @bind-Value="layMatKhauDto.OtpCode" />
                                            <ValidationMessage style="color:red; margin-top: 5px;" For="@(() => layMatKhauDto.OtpCode)" />
                                        </div>

                                        <div class="group">
                                            <FluentButton @onclick="VerifyOtpAsync"
                                                          Disabled="@isVerifying"
                                                          Loading="@IsLoading"
                                                          Appearance="Appearance.Accent">
                                                Xác thực OTP
                                            </FluentButton>
                                        </div>
                                    }

                                    <hr />
                                    <div class="group">
                                        <FluentButton Loading="@IsLoading" Appearance="Appearance.Lightweight" Class="back-button" Style="width: 100%;" IconStart="@(new Icons.Regular.Size20.ArrowLeft())" OnClick="OpenModalDangNhap">
                                            Quay lại đăng nhập/đăng ký
                                        </FluentButton>
                                    </div>
                                }
                                else if (forgotStep == 2)
                                {
                                    <div class="group">
                                        <label class="form-label">Mật khẩu mới</label>
                                        <InputText class="form-control" type="password" @bind-Value="layMatKhauDto.PasswordMoi" />
                                        <ValidationMessage style="color:red ;margin-top:10px;" For="@(() => layMatKhauDto.PasswordMoi)" />

                                    </div>

                                    <div class="group">
                                        <label class="form-label">Xác nhận mật khẩu</label>
                                        <InputText class="form-control" type="password" @bind-Value="layMatKhauDto.PasswordConfirmMoi" />
                                        <ValidationMessage style="color:red ;margin-top:10px;" For="@(() => layMatKhauDto.PasswordConfirmMoi)" />

                                    </div>

                                    <div class="group">
                                        <FluentButton Loading="@IsLoading" Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;height:37px; margin-top:5px;">
                                            Xác nhận
                                        </FluentButton>
                                        <hr />
                                        <FluentButton Loading="@IsLoading" Appearance="Appearance.Lightweight" Class="back-button" Style="width: 100%;" IconStart="@(new Icons.Regular.Size20.ArrowLeft())" OnClick="OpenModalDangNhap">
                                            Quay lại đăng nhập/đăng ký
                                        </FluentButton>
                                    </div>
                                }

                            </EditForm>
                        </div>


                    </div>
                </div>
            </div>

        </FluentDialogBody>
    </FluentDialog>


</body>
<script src="https://www.google.com/recaptcha/api.js?render=explicit" async defer></script>
<script src="\Js\recaptchaInterop.js"></script>
<style>


    *,
    :after,
    :before {
        box-sizing: border-box;
    }

    .clearfix:after,
    .clearfix:before {
        content: "";
        display: table;
    }

    .clearfix:after {
        clear: both;
        display: block;
    }

    a {
        color: inherit;
        text-decoration: none;
    }

    .login-wrap {
        width: 100%;
        margin: auto;
        max-width: 525px;
        min-height: 670px;
        position: relative;
        background: url(https://png.pngtree.com/png-clipart/20230916/original/pngtree-fast-food-in-a-cute-hand-drawn-style-clipart-vector-png-image_12246520.png) no-repeat center;
        box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19);
    }

    .login-html {
        width: 100%;
        height: 100%;
        position: absolute;
        padding: 90px 70px 50px 70px;
        background: rgba(40, 57, 101, 0.9);
    }

        .login-html .sign-in-htm,
        .login-html .sign-up-htm {
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            position: absolute;
            transform: rotateY(180deg);
            backface-visibility: hidden;
            transition: all 0.4s linear;
        }

        .login-html .sign-in,
        .login-html .sign-up,
        .login-form .group .check {
            display: none;
        }

        .login-html .tab,
        .login-form .group .label,
        .login-form .group .button {
            text-transform: uppercase;
        }

        .login-html .tab {
            font-size: 22px;
            margin-right: 15px;
            cursor: pointer;
            padding-bottom: 5px;
            margin: 0 15px 10px 0;
            display: inline-block;
            border-bottom: 2px solid transparent;
        }

        .login-html .sign-in:checked + .tab,
        .login-html .sign-up:checked + .tab {
            color: #fff;
            border-color: #1161ee;
            cursor: pointer;
        }

    .login-form {
        min-height: 345px;
        position: relative;
        perspective: 1000px;
        transform-style: preserve-3d;
    }

        .login-form .group {
            margin-bottom: 15px;
        }

            .login-form .group .label,
            .login-form .group .input,
            .login-form .group .button {
                width: 100%;
                color: #fff;
                display: block;
            }

            .login-form .group .input,
            .login-form .group .button {
                border: none;
                padding: 15px 20px;
                border-radius: 25px;
                background: rgba(255, 255, 255, 0.1);
            }


            .login-form .group .label {
                color: #aaa;
                font-size: 12px;
            }

            .login-form .group .button {
                background: #1161ee;
                cursor: pointer;
            }

                .login-form .group .button:hover {
                    background: #1454c4;
                    cursor: pointer;
                }

            .login-form .group label .icon {
                width: 15px;
                height: 15px;
                border-radius: 2px;
                position: relative;
                display: inline-block;
                background: rgba(255, 255, 255, 0.1);
            }

                .login-form .group label .icon:before,
                .login-form .group label .icon:after {
                    content: "";
                    width: 10px;
                    height: 2px;
                    background: #fff;
                    position: absolute;
                    transition: all 0.2s ease-in-out 0s;
                }

                .login-form .group label .icon:before {
                    left: 3px;
                    width: 5px;
                    bottom: 6px;
                    transform: scale(0) rotate(0);
                }

                .login-form .group label .icon:after {
                    top: 6px;
                    right: 0;
                    transform: scale(0) rotate(0);
                }

            .login-form .group .check:checked + label {
                color: #fff;
            }

                .login-form .group .check:checked + label .icon {
                    background: #1161ee;
                }

                    .login-form .group .check:checked + label .icon:before {
                        transform: scale(1) rotate(45deg);
                    }

                    .login-form .group .check:checked + label .icon:after {
                        transform: scale(1) rotate(-45deg);
                    }

    .login-html
    .sign-in:checked + .tab + .sign-up + .tab + .login-form
    .sign-in-htm {
        transform: rotate(0);
    }

    .login-html .sign-up:checked + .tab + .login-form .sign-up-htm {
        transform: rotate(0);
    }

    .hr {
        height: 2px;
        margin: 60px 0 50px 0;
        background: rgba(255, 255, 255, 0.2);
    }

    .foot-lnk {
        text-align: center;
    }

    .close-button {
        z-index: 10;
        position: absolute;
        top: 10px;
        right: 10px;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: transparent; /* Màu đỏ nhạt */
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        cursor: pointer;
        font-weight: bold;
        font-size: 16px;
        z-index: 1000; /* Đảm bảo nút ở trên cùng */
    }

        .close-button:hover {
            background: #e43f3f; /* Màu đỏ đậm hơn khi hover */
        }

    .group .form-label {
        color: white !important;
    }

    .back-button {
        background: transparent;
        color: #1161ee; 
        font-weight: 600;
        border: 1px solid #1161ee;  
        border-radius: 6px;
        transition: background 0.3s ease, color 0.3s ease, transform 0.3s ease;
    }

        .back-button:hover {
            background: rgba(17, 97, 238, 0.1);  
            color: #0d4bb5; 
            transform: scale(1.05);
        }

</style>

@code {
    [Parameter] public RegisterDto Content { get; set; } = new();
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private RegisterDto registerModel = new();
    private OtpConfirmDto layMatKhauDto { get; set; } = new OtpConfirmDto();

    private bool IsLoading = false;
    public string CheckEmail { get; set; } = string.Empty;

    private int forgotStep = 1;  // Bước 1: Nhập email, gửi và xác thực OTP, Bước 2: Nhập mật khẩu mới

    private bool isSendingOTP = false;
    private bool otpSent = false;
    private bool isVerifying = false;
    private int countdown = 60;
    private Timer? timer;

    private int widgetId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var siteKey = "6LdNyqMrAAAAAAwO8OMLCHBujdzwa-XzlB3v6GPG";
            try
            {
                widgetId = await JSRuntime.InvokeAsync<int>("recaptchaInterop.render", "recaptcha-container", siteKey);
            }
            catch
            {
                await Task.Delay(500);
                widgetId = await JSRuntime.InvokeAsync<int>("recaptchaInterop.render", "recaptcha-container", siteKey);
            }
        }
    }


    private async Task OpenModalDangNhap()
    {
        try
        {
            await Dialog.CloseAsync();
            var dialog = await DialogService.ShowDialogAsync<AuthDialog>(new DialogParameters
            {
                Title = null,
                PreventScroll = true,
                Modal = true,
                PreventDismissOnOverlayClick = false,
                ShowDismiss = false
            });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal: {ex.Message}");
        }
    }

    private async Task SendOTPAsync()
    {
        try
        {
            if (isSendingOTP) return;

            IsLoading = true;

            if (string.IsNullOrEmpty(layMatKhauDto.Email))
            {
                CheckEmail = "Vui lòng nhập email";
                StateHasChanged();
                return;
            }

            // Lấy token reCAPTCHA trước khi gửi
            string recaptchaToken = await JSRuntime.InvokeAsync<string>("recaptchaInterop.getResponse", widgetId);

            if (string.IsNullOrEmpty(recaptchaToken))
            {
                CheckEmail = "Vui lòng xác nhận bạn không phải là robot.";
                StateHasChanged();
                return;
            }

            layMatKhauDto.RecaptchaToken = recaptchaToken;
            isSendingOTP = true;
                
            requestRestAPI.Endpoint = "api/User/SendOtp";
            ResultAPI result = await CallApi.Put(requestRestAPI, layMatKhauDto);

            if (result.Status == StatusCode.OK)
            {

                otpSent = true;
                countdown = 60;
                StartCountdown();
                ToastService.ShowSuccess("Mã xác nhận đã được gửi!");
            }
            else
            {
                isSendingOTP = false;
                ToastService.ShowError("" + result.Message);
                await JSRuntime.InvokeVoidAsync("recaptchaInterop.reset", widgetId);
            }

        }
        catch (Exception ex)
        {

            isSendingOTP = false;
            ToastService.ShowError("" + ex.Message);
            await JSRuntime.InvokeVoidAsync("recaptchaInterop.reset", widgetId);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();

        }

    }

    private async Task VerifyOtpAsync()
    {
        try
        {
            IsLoading = true;
            isVerifying = true;
            CheckEmail = "";

            if (string.IsNullOrEmpty(layMatKhauDto.OtpCode))
            {
                CheckEmail = "Vui lòng nhập mã OTP.";
                return;
            }

            var verifyDto = new OtpConfirmDto { Email = layMatKhauDto.Email, OtpCode = layMatKhauDto.OtpCode };

            requestRestAPI.Endpoint = "api/User/VerifyOtp";
            ResultAPI result = await CallApi.Put(requestRestAPI, verifyDto);

            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Xác thực OTP thành công!");
                timer?.Dispose();
                isSendingOTP = false;
                forgotStep = 2;
            }
            else
            {
                CheckEmail = "Xác thực OTP thất bại: " + result.Message;
            }
        }
        catch (Exception ex)
        {
            CheckEmail = "Lỗi: " + ex.Message;
        }
        finally
        {
            isVerifying = false;
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task Confirm()
    {
        try
        {
            IsLoading = true;

            requestRestAPI.Endpoint = "api/User/LayMatKhau";
            ResultAPI result = await CallApi.Put(requestRestAPI, layMatKhauDto);

            if (result.Status == StatusCode.OK)
            {

                ToastService.ShowSuccess("Mật khẩu đã được thay đổi");
                await Dialog.CloseAsync();
            }
            else
            {
                ToastService.ShowError("Lỗi: " + result.Message);
            }
        }
        catch (Exception ex)
        {

            ToastService.ShowError("Lỗi: " + ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();

        }

    }

    private void StartCountdown()
    {
        timer?.Dispose(); // Hủy timer cũ nếu có

        timer = new Timer(state =>
        {
            if (countdown > 0)
            {
                countdown--;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                isSendingOTP = false;
                InvokeAsync(async () =>
            {
                await JSRuntime.InvokeVoidAsync("recaptchaInterop.reset", widgetId);
                StateHasChanged();
            });
                timer?.Dispose();
            }
        }, null, 0, 1000); // 1000ms = 1 giây
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}