@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Category
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid
@using System.Text.Json
<header>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <ul class="navbar-nav mx-auto" style="width:100%">
                <FluentHorizontalScroll Style="width: 80%; margin: 0 auto;">
                    @foreach (var category in categoryDtos)
                    {
                        <li style="width: 170px;" class="nav-item mx-3">
                            <img src="@category.ImageUrl"
                                 style="height: 70px; width: 100%; object-fit: cover;"
                                 alt="@category.CategoryName">
                            <div style="text-align: center;">
                                <a class="nav-link text-muted fw-bold fs-5 active" href="#uudai">@category.CategoryName</a>
                            </div>
                        </li>
                    }
                </FluentHorizontalScroll>
            </ul>
        </div>
    </nav>
</header>

@code {
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private List<CategoryDto> categoryDtos = new List<CategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }
    private async Task LoadCategory()
    {

        try
        {
            var baseQuery = new BaseQuery
                {

                    gridRequest = new GridRequest
                    {
                        page = 1,
                        pageSize = int.MaxValue,
                        sort = new List<Sort>
                        {
                            new Sort { field = "DisplayOrder", dir = "asc" }
                        }
                    }
                };
            requestRestAPI.Endpoint = "api/Category/GetPaged";

            ResultAPI result = await CallApi.Post<DataTableJson>(requestRestAPI, baseQuery);
            if (result.Status == StatusCode.OK && result.Data is DataTableJson dataTable)
            {
                var items = JsonSerializer.Deserialize<List<CategoryDto>>(dataTable.Data.GetRawText(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<CategoryDto>();


                categoryDtos = items.Where(x => x.ModerationStatus == ModerationStatus.Approved).ToList();

            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách phân loại: {ex.Message}");
        }
    }
}
