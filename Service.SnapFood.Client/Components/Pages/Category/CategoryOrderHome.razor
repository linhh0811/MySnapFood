@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Category
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid
@using System.Text.Json
<header>
        <FluentStack Orientation="Orientation.Horizontal"
                     Style="display:flex; justify-content:space-between; margin-bottom:10px;">
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">

            </FluentStack>
        <input class="form-control" style="border-radius: 10px;border: 2px solid #ffcccc; max-width:400px;" @oninput="SearchChanged" placeholder="Nhập từ khóa tìm kiếm" />

        </FluentStack>
    <nav class="navbar navbar-expand-lg navbar-light bg-light p-3"style="z-index:2;">
       
        <div class="container">
           
            <ul class="navbar-nav mx-auto" style="width:100%">
                <FluentHorizontalScroll Style="width: 80%; margin: 0 auto;">
                    <li style="width: 170px;" class="nav-item mx-3">
                        <div @onclick="()=>SelectCategory(CategoryNone)" style="cursor: pointer;">
                            <img src="@CategoryNone.ImageUrl"
                            style="height: 70px; width: 100%; object-fit: cover;"
                                 alt="@CategoryNone.CategoryName">
                            <div style="text-align: center;">
                                <a class="nav-link text-muted fw-bold fs-5 active"><p style="@(CategoryNone.Id == CategorySelect.Id ? "color: red;":"" ); ">@CategoryNone.CategoryName</p></a>
                            </div>
                        </div>

                    </li>
                    @foreach (var category in categoryDtos)
                    {
                        <li style="width: 170px;" class="nav-item mx-3">
                            <div @onclick="()=>SelectCategory(category)" style="cursor: pointer;">
                                <img src="@category.ImageUrl"
                                style="height: 70px; width: 100%; object-fit: cover;"
                                alt="@category.CategoryName">
                                <div style="text-align: center;">
                                    <a class="nav-link text-muted fw-bold fs-5 active"><p style="@(category.Id == CategorySelect.Id ? "color: red;":"" ); ">@category.CategoryName</p></a>
                                </div>
                            </div>

                        </li>
                    }
                </FluentHorizontalScroll>
            </ul>
        </div>
    </nav>
</header>

@code {

    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private List<CategoryDto> categoryDtos = new List<CategoryDto>();
    [Parameter]
    public EventCallback<List<CategoryDto>> DataCategory { get; set; }
    [Parameter]
    public EventCallback<CategoryDto> OnCategorySelected { get; set; }
    [Parameter]
    public string CategoryId { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnSearchChanged { get; set; }

    private CategoryDto CategorySelect = new();
    private CategoryDto CategoryNone = new()
    {
        Id=Guid.Empty.ToString(),
        CategoryName="Tất cả món ăn",
            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/2/2/229119-online.png.webp"
        
    };

    private string keyword = string.Empty;

    private async Task SearchChanged(ChangeEventArgs e)
    {
        keyword = e.Value?.ToString() ?? string.Empty;
        await OnSearchChanged.InvokeAsync(keyword);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
        await DataCategory.InvokeAsync(categoryDtos);
        if (string.IsNullOrEmpty(CategoryId))
        {
            await OnCategorySelected.InvokeAsync(CategoryNone);
            CategorySelect = CategoryNone;
        }else
        {
            await OnCategorySelected.InvokeAsync(categoryDtos.FirstOrDefault(x=>x.Id==CategoryId));
            CategorySelect = categoryDtos.FirstOrDefault(x => x.Id == CategoryId) ?? categoryDtos.First();
        }
        
    }
    private async Task LoadCategory()
    {

        try
        {
            var baseQuery = new BaseQuery
                {

                    gridRequest = new GridRequest
                    {
                        page = 1,
                        pageSize = int.MaxValue,
                        sort = new List<Sort>
                        {
                            new Sort { field = "DisplayOrder", dir = "asc" }
                        }
                    }
                };
            requestRestAPI.Endpoint = "api/Category/GetPaged";

            ResultAPI result = await CallApi.Post<DataTableJson>(requestRestAPI, baseQuery);
            if (result.Status == StatusCode.OK && result.Data is DataTableJson dataTable)
            {
                var categoryDto = JsonSerializer.Deserialize<List<CategoryDto>>(dataTable.Data.GetRawText(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<CategoryDto>();


                categoryDtos = categoryDto.Where(x => x.ModerationStatus == ModerationStatus.Approved && x.IsExits == true).ToList();

            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách phân loại: {ex.Message}");
        }
    }

    private async Task SelectCategory(CategoryDto category)
    {
        CategorySelect = category;
        await OnCategorySelected.InvokeAsync(category); // Gửi danh mục được chọn lên cha
        StateHasChanged();
    }
}
