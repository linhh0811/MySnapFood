@page "/lich-su-don-hang"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Microsoft.AspNetCore.Components.Authorization
@using Service.SnapFood.Client.Dto.Bill
@using Service.SnapFood.Share.Model.Enum
@using System.Security.Claims

<h2 class="mb-4">LỊCH SỬ ĐƠN HÀNG</h2>

<div class="d-flex justify-content-end align-items-center mb-3">

    <select class="form-select w-auto" @onchange="OnStatusFilterChanged">
        <option value="">Tất cả</option>
        @foreach (var status in Enum.GetValues<StatusOrder>().Cast<StatusOrder>().Where(s => (int)s >= 0 && (int)s <= 4))
        {
            <option value="@((int)status)">@GetStatusText(status)</option>
        }
    </select>

</div>

@if (IsLoading)
{
    <p>Đang tải đơn hàng...</p>
}
else if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}
else if (FilteredBills.Count == 0)
{
    <p>Không có đơn hàng.</p>
}
else
{
    <div class="mt-3">
        <div class="d-flex px-3 py-2 bg-light rounded mb-2 fw-bold">
            <div style="flex: 2;">Mã đơn</div>
            <div style="flex: 3;">Trạng thái</div>
            <div style="flex: 3;">Tổng tiền</div>
            <div style="flex: 3;">Ngày tạo</div>
            <div style="flex: 1;"></div>
        </div>


        @foreach (var bill in FilteredBills)
        {
            <div class="d-flex align-items-center border-bottom px-3 py-2">
                <div style="flex: 2;">@bill.BillCode</div>
                <div style="flex: 3; color:@GetStatusColor(bill.Status)">
                    @GetStatusText(bill.Status)
                </div>
                <div style="flex: 3;">@bill.TotalAmount.ToString("N0") đ</div>
                <div style="flex: 3;">@bill.Created.ToString("dd/MM/yyyy HH:mm:ss")</div>
                <div style="flex: 1;">
                    <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => ViewDetail(bill.Id))" Title="Xem chi tiết">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 5c-7.633 0-11 7-11 7s3.367 7 11 7 11-7 11-7-3.367-7-11-7zm0 12c-2.761 0-5-2.239-5-5s2.239-5
                             5-5 5 2.239 5 5-2.239 5-5 5zm0-8c-1.654 0-3 1.346-3 3s1.346 3
                             3 3 3-1.346 3-3-1.346-3-3-3z" />
                        </svg>
                    </FluentButton>
                </div>
            </div>
        }

    </div>
}

@code {
    private List<BillDto> AllBills = new();
    private int SelectedTab = 0;
    private bool IsLoading = true;
    private string ErrorMessage = string.Empty;

    private StatusOrder? SelectedStatusFilter = null;

    private List<BillDto> FilteredBills => AllBills
        .Where(b =>
            (SelectedTab == 0 || (int)b.Status == SelectedTab) &&
            (!SelectedStatusFilter.HasValue || b.Status == SelectedStatusFilter.Value))
        .ToList();

    private string GetStatusColor(StatusOrder status) => status switch
    {
        StatusOrder.Pending => "#ff9800",
        StatusOrder.Confirmed => "#2196f3",
        StatusOrder.Shipping => "#00bcd4",
        StatusOrder.Completed => "#4caf50",
        StatusOrder.Cancelled => "#f44336",
        _ => "#000000"
    };

    private string GetStatusText(StatusOrder status) => status switch
    {
        StatusOrder.Pending => "Chờ xác nhận",
        StatusOrder.Confirmed => "Đã xác nhận",
        StatusOrder.Shipping => "Đang giao",
        StatusOrder.Completed => "Hoàn tất",
        StatusOrder.Cancelled => "Đã huỷ",
        _ => "Không rõ"
    };

    private async Task LoadBillData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                var userIdClaim = user.FindFirst("user_id");

                if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
                {
                    var result = await Http.GetFromJsonAsync<List<BillDto>>($"api/Bill/ByUser/{userId}");
                    if (result != null)
                        AllBills = result;
                    else
                        ErrorMessage = "Không thể tải đơn hàng.";
                }
                else
                    ErrorMessage = "Không tìm thấy thông tin UserId trong Claims.";
            }
            else
            {
                ErrorMessage = "Người dùng chưa đăng nhập.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Lỗi khi tải đơn hàng: " + ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBillData();
    }

    private void ViewDetail(Guid id)
    {
        Navigation.NavigateTo($"/bills/user/{id}");
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int statusInt) && Enum.IsDefined(typeof(StatusOrder), statusInt))
        {
            SelectedStatusFilter = (StatusOrder)statusInt;
        }
        else
        {
            SelectedStatusFilter = null;
        }
    }
}
