@page "/lich-su-don-hang"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Microsoft.AspNetCore.Components.Authorization
@using Service.SnapFood.Client.Dto.Bill
@using System.Security.Claims
@using Service.SnapFood.Client.Enums
<div class="container p-3 m-0">
    <div class="row d-flex align-items-center justify-content-between">
        <div class="col-auto">
            <h4 class="fw-bold m-0" style="color:#ff5961">LỊCH SỬ ĐƠN HÀNG</h4>
        </div>
        <div class="col-auto">
            <select class="form-select w-auto" @onchange="OnStatusFilterChanged">
                <option value="">Tất cả</option>
                @foreach (var status in Enum.GetValues<StatusOrder>().Cast<StatusOrder>().Where(s => (int)s >= 0 && (int)s <= 4))
                {
                    <option value="@((int)status)">@GetStatusText(status)</option>
                }
            </select>
        </div>
    </div>
    @if (IsLoading)
    {
        <p>Đang tải đơn hàng...</p>
    }
    else if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <p class="text-danger">@ErrorMessage</p>
    }
    else if (FilteredBills.Count == 0)
    {
        <p>Không có đơn hàng.</p>
    }
    else
    {
        <div class="mt-3">
            <FluentGridItem Style="width:100%;">
                <FluentDataGrid TGridItem="BillDto" Items="FilteredBills.AsQueryable()"
                                ResizableColumns="false"
                                GridTemplateColumns="2.0fr 1.0fr 1.5fr 1.5fr 0.5fr"
                                RowSize="DataGridRowSize.Large"
                                ShowHover="true"
                                GenerateHeader="GenerateHeaderOption.Sticky">



                    <TemplateColumn Title="Mã đơn hàng" Style="display:flex;align-items: center;">
                        <span style="cursor: pointer;">
                            @context.BillCode
                        </span>
                    </TemplateColumn>
                    <TemplateColumn Title="Trạng thái" Style="display: flex;align-items: center;">
                        <span style="cursor: pointer;color:@GetStatusColor(context.Status)">
                            @GetStatusText(context.Status)
                        </span>
                    </TemplateColumn>
                    <TemplateColumn Title="Tổng tiền" Style="display: flex; flex-direction: column; justify-content: center;">
                        @if ((context.TotalAmountEndow + context.DiscountAmount) > 0)
                        {
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <FluentLabel Style="text-decoration: line-through;font-size:12px;">
                                    @context.TotalAmount.ToString("N0") đ
                                </FluentLabel>

                                @if ((context.TotalAmount+context.DiscountAmount )> (context.TotalAmountEndow+context.PhiVanChuyen))
                                {
                                    var discountPercent = Math.Round(((context.TotalAmountEndow + context.DiscountAmount )/( context.TotalAmount + context.PhiVanChuyen)) * 100);
                                    <FluentLabel Style="color: green;font-size:12px;">
                                        -@discountPercent %
                                    </FluentLabel>
                                }
                            </div>
                            <FluentLabel>@((context.TotalAmount - context.TotalAmountEndow - context.DiscountAmount + context.PhiVanChuyen).ToString("N0")) đ</FluentLabel>

                        }
                        else
                        {
                            <FluentLabel>@((context.TotalAmount+context.PhiVanChuyen).ToString("N0")) đ</FluentLabel>
                        }
                    </TemplateColumn>
                    <TemplateColumn Title="Ngày đặt" Style="display:flex;align-items: center;">
                        <span style="cursor: pointer;">
                            @context.Created.ToString("dd/MM/yyyy HH:mm:ss")
                        </span>
                    </TemplateColumn>
                    <TemplateColumn Style="display:flex;align-items: center;">
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => ViewDetail(context.Id))" Title="Xem chi tiết">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Eye())" />
                        </FluentButton>
                    </TemplateColumn>

                </FluentDataGrid>
            </FluentGridItem>
        </div>
        
    }
</div>





@code {
    private List<BillDto> AllBills = new();
    private int SelectedTab = 0;
    private bool IsLoading = true;
    private string ErrorMessage = string.Empty;

    private StatusOrder? SelectedStatusFilter = null;

    private List<BillDto> FilteredBills => AllBills
        .Where(b =>
            (SelectedTab == 0 || (int)b.Status == SelectedTab) &&
            (!SelectedStatusFilter.HasValue || b.Status == SelectedStatusFilter.Value))
        .ToList();

    private string GetStatusColor(StatusOrder status) => status switch
    {
        StatusOrder.Pending => "#ff9800",
        StatusOrder.Confirmed => "#2196f3",
        StatusOrder.Shipping => "#00bcd4",
        StatusOrder.Completed => "#4caf50",
        StatusOrder.Cancelled => "#f44336",
        _ => "#000000"
    };

    private string GetStatusText(StatusOrder status) => status switch
    {
        StatusOrder.Pending => "Chờ xác nhận",
        StatusOrder.Confirmed => "Đã xác nhận",
        StatusOrder.Shipping => "Đang giao",
        StatusOrder.Completed => "Hoàn thành",
        StatusOrder.Cancelled => "Đã huỷ",
        _ => "Không rõ"
    };

    private async Task LoadBillData()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                var userIdClaim = user.FindFirst("user_id");

                if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
                {
                    var result = await Http.GetFromJsonAsync<List<BillDto>>($"api/Bill/ByUser/{userId}");
                    if (result != null)
                        AllBills = result;
                    else
                        ErrorMessage = "Không thể tải đơn hàng.";
                }
                else
                    ErrorMessage = "Không tìm thấy thông tin UserId trong Claims.";
            }
            else
            {
                ErrorMessage = "Người dùng chưa đăng nhập.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Lỗi khi tải đơn hàng: " + ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBillData();
    }

    private void ViewDetail(Guid id)
    {
        Navigation.NavigateTo($"/Lich-Su-Don-Hang/{id}");
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int statusInt) && Enum.IsDefined(typeof(StatusOrder), statusInt))
        {
            SelectedStatusFilter = (StatusOrder)statusInt;
        }
        else
        {
            SelectedStatusFilter = null;
        }
    }
}
