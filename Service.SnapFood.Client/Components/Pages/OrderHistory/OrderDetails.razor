@page "/bills/user/{id:guid}"
@inject HttpClient Http
@inject NavigationManager Nav

@using Service.SnapFood.Client.Dto.Bill
@using Service.SnapFood.Client.Dto.BillDetails
@using Service.SnapFood.Share.Model.Enum

<h2 style="margin-bottom: 24px;">Chi tiết đơn hàng</h2>

@if (IsLoading)
{
    <p>Đang tải đơn hàng...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red;">@ErrorMessage</p>
}
else
{
    <!-- STEP TRẠNG THÁI -->
    <div class="step-container">
        @for (int i = 1; i <= 5; i++)
        {
            string bgColor = "#ddd";
            bool isActive = false;

            if (OrderStatus == StatusOrder.Cancelled)
            {
                if (i == 5)
                {
                    bgColor = GetStepColor(StatusOrder.Cancelled);
                    isActive = true;
                }
            }
            else
            {
                int currentStep = ConvertStatusToStep(OrderStatus);
                if (i <= currentStep)
                {
                    // Mỗi bước dùng màu đúng của trạng thái
                    bgColor = GetStepColor(ConvertStepToStatus(i));
                    isActive = true;
                }
            }

            <div class="step @(isActive ? "active" : "")">
                <div class="circle" style="background-color: @bgColor">@i</div>
                <div class="step-label">@GetStepLabel(i)</div>
            </div>
        }
    </div>



    <!-- DANH SÁCH MÓN ĂN -->
    @if (Items == null || !Items.Any())
    {
        <p>Không tìm thấy đơn hàng.</p>
    }
    else
    {
        <div style="margin-top: 16px">
            <div style="font-weight: bold; display: flex; padding: 10px 16px; background-color: #f2f2f2; border-radius: 6px; margin-bottom: 8px;">
                <div style="flex: 3;">Sản phẩm</div>
                <div style="flex: 2;">Số lượng</div>
                <div style="flex: 2;">Giá</div>
                <div style="flex: 3;">Thành tiền</div>
            </div>

            @foreach (var item in Items)
            {
                <div style="display: flex; align-items: center; padding: 10px 16px; border-bottom: 1px solid #e0e0e0;">
                    <div style="flex: 3; display: flex; align-items: center; gap: 12px;">
                        <img src="@item.ImageUrl" alt="@item.ItemsName" style="width: 64px; height: 64px; object-fit: cover; border-radius: 6px;" />
                        <div style="display: flex; flex-direction: column;">
                            <span style="font-weight: 600;">@item.ItemsName</span>
                            @if (item.ItemType == ItemType.Combo && item.Children != null && item.Children.Any())
                            {
                                <div style="margin-left: 12px; color: #555; font-size: 14px;">
                                    @foreach (var child in item.Children)
                                    {
                                        <div>• @child.ItemsName</div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <div style="flex: 2;">@item.Quantity</div>
                    <div style="flex: 2;">@item.Price.ToString("N0") đ</div>
                    <div style="flex: 3;">@((item.Quantity * item.Price).ToString("N0")) đ</div>
                </div>
            }
        </div>

        <div style="text-align: right; font-size: 18px; font-weight: bold; margin-top: 20px;">
            Tổng cộng: @Items.Sum(i => i.Price * i.Quantity).ToString("N0") đ
        </div>
    }
    <style>
        .step-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            background: #fff;
            margin-bottom: 20px;
        }

        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            flex: 1;
            position: relative;
        }

            .step:not(:last-child)::after {
                content: "";
                position: absolute;
                top: 17px;
                right: -50%;
                width: 100%;
                height: 3px;
                background-color: #ddd;
                z-index: 0;
            }

            .step.active:not(:last-child)::after {
                background-color: #007bff;
            }

        .circle {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background-color: #ddd;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            z-index: 1;
            position: relative;
        }

        .step.active .circle {
            background-color: #007bff;
        }

        .step-label {
            margin-top: 5px;
            font-size: 14px;
            color: #333;
        }
    </style>

}

@code {
    [Parameter] public Guid id { get; set; }

    private List<BillDetailsDto> Items = new();
    private bool IsLoading = true;
    private string ErrorMessage = string.Empty;
    private StatusOrder OrderStatus;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Items = await Http.GetFromJsonAsync<List<BillDetailsDto>>($"api/Bill/DetailsByBillId/{id}") ?? new();
            var bill = await Http.GetFromJsonAsync<BillDto>($"api/Bill/{id}");

            if (bill != null)
            {
                OrderStatus = bill.Status;
            }

            if (!Items.Any())
            {
                ErrorMessage = "Không có dữ liệu cho đơn hàng.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi khi tải đơn hàng: {ex.Message}";
        }

        IsLoading = false;
    }

    private int ConvertStatusToStep(StatusOrder status)
    {
        return status switch
        {
            StatusOrder.Pending => 1,
            StatusOrder.Confirmed => 2,
            StatusOrder.Shipping => 3,
            StatusOrder.Completed => 4,
            StatusOrder.Cancelled => 5,
            _ => 1
        };
    }

    private string GetStepColor(StatusOrder status)
    {
        return status switch
        {
            StatusOrder.Pending => "#ff9800",    // Cam
            StatusOrder.Confirmed => "#2196f3",  // Xanh dương
            StatusOrder.Shipping => "#00bcd4",   // Xanh ngọc
            StatusOrder.Completed => "#4caf50",  // Xanh lá
            StatusOrder.Cancelled => "#f44336",  // Đỏ
            _ => "#ddd"
        };
    }

    private string GetStepLabel(int step)
    {
        return step switch
        {
            1 => "Chờ xác nhận",
            2 => "Đã xác nhận",
            3 => "Giao hàng",
            4 => "Hoàn thành",
            5 => "Huỷ",
            _ => ""
        };
    }

    private StatusOrder ConvertStepToStatus(int step)
    {
        return step switch
        {
            1 => StatusOrder.Pending,
            2 => StatusOrder.Confirmed,
            3 => StatusOrder.Shipping,
            4 => StatusOrder.Completed,
            5 => StatusOrder.Cancelled,
            _ => StatusOrder.Pending
        };
    }

}
