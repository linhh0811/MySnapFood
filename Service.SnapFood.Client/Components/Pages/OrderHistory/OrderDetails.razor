@page "/Lich-Su-Don-Hang/{id:guid}"
@inject HttpClient Http
@inject NavigationManager Nav

@using Service.SnapFood.Client.Dto.Bill
@using Service.SnapFood.Client.Dto.BillDetails
@using Service.SnapFood.Client.Enums
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient

<h2 style="margin-bottom: 24px;">Chi tiết đơn hàng</h2>

@if (IsLoading)
{
    <p>Đang tải đơn hàng...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red;">@ErrorMessage</p>
}
else
{

    <!-- STEP TRẠNG THÁI -->
    <div class="step-container  @(OrderStatus == StatusOrder.Cancelled ? "cancelled" : "")">
        @for (int i = 1; i <= 5; i++)
        {
            string bgColor = "#ddd";
            bool isActive = false;

            if (OrderStatus == StatusOrder.Cancelled)
            {
                 bgColor = GetStepColor(StatusOrder.Cancelled);
                <div class="step active">
                    <div class="circle" style="background-color: @bgColor">@i</div>
                    <div class="step-label">@GetStepLabel(i)</div>
                </div>
            }
            else
            {
                int currentStep = ConvertStatusToStep(OrderStatus);
                if (i <= currentStep)
                {
                    // Mỗi bước dùng màu đúng của trạng thái
                    bgColor = GetStepColor(ConvertStepToStatus(i));
                    isActive = true;
                }
                <div class="step @(isActive ? "active" : "")">
                    <div class="circle" style="background-color: @bgColor">@i</div>
                    <div class="step-label">@GetStepLabel(i)</div>
                </div>
            }

            
        }
    </div>
    <div class="container order-info">
        <div class="row">
            <!-- Bên trái -->
            <div class="col-md-6 left">
                <p><strong>@Item.BillDeliveryDto.ReceiverName</strong></p>
                <p>@Item.BillDeliveryDto.ReceiverAddress</p>
                <p>Điện thoại: @Item.BillDeliveryDto.ReceiverPhone</p>
            </div>

            <!-- Bên phải -->
            <div class="col-md-6 right">
                <p><span class="label">Mã đơn hàng:</span> <span class="order-id">@Item.BillCode</span></p>
                <p><span class="label">Thời gian đặt:</span>@Item.Created</p>
                <p><span class="label">Hình thức thanh toán:</span>@Item.BillPaymentDto.PaymentType</p>
            </div>
        </div>
    </div>


    <!-- DANH SÁCH MÓN ĂN -->
    @if (!Item.BillDetailsDtos.Any())
    {
        <p>Không tìm thấy đơn hàng.</p>
    }
    else
    {

        <div style="margin-top: 16px">
            <FluentDataGrid Items="@Item.BillDetailsDtos.AsQueryable()"
            TGridItem="BillDetailsDto"
            GridTemplateColumns=" 0.75fr 1.45fr 0.75fr 0.75fr 0.75fr"
            ResizableColumns="false"
            MultiLine="true"
            ShowHover="true">
                <ChildContent>

                    <TemplateColumn Title="Hình ảnh" Style="display:flex;align-items:center;">
                        <img src="@context.ImageUrl" style="max-height:60px;max-width:70px;object-fit:contain;" />
                    </TemplateColumn>
                    <TemplateColumn Title="Tên" Style="display: flex; flex-direction: column; justify-content: center;">
                        <span style="font-size:16px;">
                            @context.ItemsName
                        </span>

                        @if (context.ItemType == ItemType.Combo)
                        {
                            <div style="max-height: 80px; overflow-y: auto; display: flex; flex-direction: column; gap: 4px; color: gray;padding-left:20px;">
                                @foreach (var item in context.Product)
                                {
                                    <div style="cursor: pointer;font-size:12px;">
                                        @item.ProductName 
                                    </div>
                                }
                            </div>
                        }
                    </TemplateColumn>
                    <TemplateColumn Title="Giá" Style="display: flex; flex-direction: column; justify-content: center;">
                        @if (context.PriceEndow > 0)
                        {
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <FluentLabel Style="text-decoration: line-through;font-size:12px;">
                                    @context.Price.ToString("N0") đ
                                </FluentLabel>

                                @if (context.Price > context.PriceEndow)
                                {
                                    var discountPercent = Math.Round(((context.Price - context.PriceEndow) / context.Price) * 100);
                                    <FluentLabel Style="color: green;font-size:12px;">
                                        -@discountPercent %
                                    </FluentLabel>
                                }
                            </div>
                            <FluentLabel>@context.PriceEndow.ToString("N0") đ</FluentLabel>
                        }
                        else
                        {
                            <FluentLabel>@context.Price.ToString("N0") đ</FluentLabel>
                        }
                    </TemplateColumn>
                    <TemplateColumn Title="Số lượng" Style="display:flex;align-items:center;gap:5px;">
                        @context.Quantity
                    </TemplateColumn>
                    <TemplateColumn Title="Tổng" Style="display: flex; flex-direction: column; justify-content: center;">
                        @if (context.PriceEndow > 0)
                        {
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <FluentLabel Style="text-decoration: line-through;font-size:12px;">
                                    @((context.Price * context.Quantity).ToString("N0")) đ
                                </FluentLabel>

                                @if (context.Price > context.PriceEndow)
                                {
                                    var discountPercent = Math.Round(((context.Price - context.PriceEndow) / context.Price) * 100);
                                    <FluentLabel Style="color: green;font-size:12px;">
                                        -@discountPercent %
                                    </FluentLabel>
                                }
                            </div>
                            <FluentLabel>@((context.PriceEndow * context.Quantity).ToString("N0")) đ</FluentLabel>
                        }
                        else
                        {
                            <FluentLabel>@((context.Price * context.Quantity).ToString("N0")) đ</FluentLabel>
                        }

                    </TemplateColumn>

                </ChildContent>
            </FluentDataGrid>

        </div>

        <div class="row">
            <div class="col-9" style="margin-top: 20px;">
                @foreach (var item in Item.BillNotesDtos)
                {
                    <div style="display: flex; justify-content: flex-start;@(item.NoteContent.Contains("hủy")?"color:red":"")">
                        <p style="min-width: 120px; text-align: left;">@(item.NoteType == NoteType.CustomerOrder?"Khách hàng":"Cửa hàng"): </p>
                        <p style="width:200px;">@item.Created.ToString("dd/MM/yyyy HH:mm:ss")</p>
                        <p style="width:100%;">@item.NoteContent</p>
                    </div>
                }           
            </div>
            <div class="col-3" style="margin-top: 20px; text-align: right;">
                <div style="display: flex; justify-content: flex-end;">
                    <p style="min-width: 120px; text-align: left;">Tạm tính:</p>
                    <p style="width:100px">@Item.TotalAmount.ToString("N0") đ</p>
                </div>
                <div style="display: flex; justify-content: flex-end;">
                    <p style="min-width: 120px; text-align: left;">Khuyến mãi:</p>
                    <p style="width:100px">@Item.TotalAmountEndow.ToString("N0") đ</p>
                </div>
                <div style="display: flex;font-size: 18px; justify-content: flex-end;">
                    <p style="min-width: 120px; text-align: left;">Tổng cộng:</p>
                    <p style="width:100px">@((Item.TotalAmount - Item.TotalAmountEndow).ToString("N0")) đ</p>
                </div>
            </div>
        </div>


    }
    <style>
        .step-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 20px;
        border: 1px solid #ddd;
        border-radius: 10px;
        background: #fff;
        margin-bottom: 20px;
        }

        .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        flex: 1;
        position: relative;
        }

        .step:not(:first-child)::after {
        content: "";
        position: absolute;
        top: 17px;
        right: 50%;
        width: 100%;
        height: 3px;
        background-color: #ddd;
        z-index: 0;
        }

        .step.active:not(:first-child)::after {
        background-color: #007bff;
        }

        .circle {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background-color: #ddd;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        z-index: 1;
        position: relative;
        }

        .step.active .circle {
        background-color: #007bff;
        }

        .step-label {
        margin-top: 5px;
        font-size: 16px;
        color: #333;
        }

        .step-container.cancelled .step.active:not(:first-child)::after {
            background-color: #dc3545;
        }
    </style>

}

@code {
    [Parameter] public Guid id { get; set; }
    [Inject] protected ICallServiceRegistry CallApi { get; set; } = default!;

    private BillViewDto Item = new();
    private bool IsLoading = true;
    private string ErrorMessage = string.Empty;
    private StatusOrder OrderStatus;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadItem();
        IsLoading = false;
    }

    private async Task LoadItem()
    {
        var request = new ApiRequestModel { Endpoint = $"api/Bill/DetailsByBillId/{id}" };
        var result = await CallApi.Get<BillViewDto>(request);
        if (result.Status==StatusCode.OK)
        {
            Item = result.Data as BillViewDto ?? new BillViewDto();
            OrderStatus = Item.Status;
        }
    }
    private int ConvertStatusToStep(StatusOrder status)
    {
        return status switch
        {
            StatusOrder.Pending => 1,
            StatusOrder.Confirmed => 2,
            StatusOrder.Shipping => 3,
            StatusOrder.Completed => 4,
            StatusOrder.Cancelled => 5,
            _ => 1
        };
    }

    private string GetStepColor(StatusOrder status)
    {
        return status switch
        {
            StatusOrder.Pending => "#ff9800",    // Cam
            StatusOrder.Confirmed => "#2196f3",  // Xanh dương
            StatusOrder.Shipping => "#00bcd4",   // Xanh ngọc
            StatusOrder.Completed => "#4caf50",  // Xanh lá
            StatusOrder.Cancelled => "#f44336",  // Đỏ
            _ => "#ddd"
        };
    }

    private string GetStepLabel(int step)
    {
        return step switch
        {
            1 => "Chờ xác nhận",
            2 => "Đã xác nhận",
            3 => "Giao hàng",
            4 => "Hoàn thành",
            5 => "Huỷ",
            _ => ""
        };
    }

    private StatusOrder ConvertStepToStatus(int step)
    {
        return step switch
        {
            1 => StatusOrder.Pending,
            2 => StatusOrder.Confirmed,
            3 => StatusOrder.Shipping,
            4 => StatusOrder.Completed,
            5 => StatusOrder.Cancelled,
            _ => StatusOrder.Pending
        };
    }

}
