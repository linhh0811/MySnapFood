@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Cart
@using Service.SnapFood.Client.Dto.Product
@using Service.SnapFood.Client.Infrastructure.Service
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Client.Components.Pages.Auth
@using Service.SnapFood.Share.Model.Commons
@using Microsoft.AspNetCore.Components.Authorization;
@using Service.SnapFood.Client.Components.Layout;
@using System.Text.Json
@inject SharedStateService SharedService

@inherits ComponentBase
@implements IDialogContentComponent<ViewParameters>
<FluentDialogBody>
    <FluentGrid Spacing="2" AdaptiveRendering="true">
        <FluentGridItem xs="12" sm="5">
            <FluentCard>
                <img src="@ProductModel.ImageUrl" style="height: 200px; object-fit: cover; width: 100%;" alt="@ProductModel.ProductName" />
                <FluentLabel Typo="Typography.H5">@ProductModel.ProductName</FluentLabel>
                @if (!string.IsNullOrEmpty(ProductModel.SizeName))
                {
                    <p class="card-title" style="margin: 0;padding-top:10px;">@ProductModel.SizeName</p>
                }
                else
                {
                    <p class="card-title" style="margin: 0;padding-top:10px">@ProductModel.CategoryName</p>

                }
            </FluentCard>
        </FluentGridItem>
        <FluentGridItem xs="12" sm="7">
            <FluentCard Style="height:67%">
                <h3>Kích thước</h3>
                <div class="size-selector">
                    @if (ProductModel.Sizes is not null)
                    {
                        @foreach (var size in ProductModel.Sizes)
                        {
                            <div class="size-item">
                                <FluentButton Appearance="Appearance.Stealth"
                                Class="@(SelectedSizeId == size.Id ? "size-button selected" : "size-button")"
                                @onclick="() => SelectSize(size.Id, size.AdditionalPrice)">
                                    @size.SizeName
                                </FluentButton>
                                <FluentLabel Style="color:red">+@size.AdditionalPrice.ToString("N0") đ</FluentLabel>
                            </div>
                        }
                    }

                </div>
            </FluentCard>
            <FluentCard Style="height:30%; margin-top:10px; display: flex; align-items: center;">
                <div style="display: flex; align-items: center; justify-content: space-between; padding: 10px; width: 100%;">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <FluentButton Appearance="Appearance.Outline" Style="width: 40px; height: 40px; background-color: #FF969A; color: white;" @onclick="DecreaseQuantity">-</FluentButton>
                        <FluentLabel Style="width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; border: 1px solid #ccc; border-radius: 4px;">@Quantity</FluentLabel>
                        <FluentButton Appearance="Appearance.Outline" Style="width: 40px; height: 40px; background-color: #FF969A; color: white;" @onclick="IncreaseQuantity">+</FluentButton>
                    </div>
                    <div>
                        @if (ProductModel.PriceEndown > 0)
                        {
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <FluentLabel Typo="Typography.H6" Style="color: red; text-decoration: line-through;">
                                    @TotalPrice.ToString("N0") đ
                                </FluentLabel>

                                @if (ProductModel.BasePrice > ProductModel.PriceEndown)
                                {                                  
                                    <FluentLabel Typo="Typography.H6" Style="color: green;">
                                        -@discountPercent%
                                    </FluentLabel>
                                }
                            </div>
                            <FluentLabel Style="color: red; font-size: 20px; font-weight: bold;">@TotalPriceEndown.ToString("N0") đ</FluentLabel>
                        }
                        else
                        {
                            <FluentLabel Style="color: red; font-size: 20px; font-weight: bold;">@TotalPrice.ToString("N0") đ</FluentLabel>
                        }

                    </div>

                </div>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>
</FluentDialogBody>
<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" Gap="10">
        <FluentButton Appearance="Appearance.Neutral" @onclick="HideDialog" Disabled="@isSaving">Hủy</FluentButton>
        <FluentButton Appearance="Appearance.Outline" Type="ButtonType.Submit" Disabled="@isSaving" Style="background-color:#ff5b6a;color: white;" @onclick="AddProductToCart">
            @if (isSaving)
            {
                <span style="margin-left: 8px;">Đang thêm vào giỏ hàng...</span>
            }
            else
            {
                <span>Thêm vào giỏ hàng</span>
            }
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

<style>
    .size-selector {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    }

    .size-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
    }

    .size-button {
    min-width: 40px;
    height: 40px;
    border: 2px solid #ccc;
    border-radius: 4px;
    background-color: white;
    color: black;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    padding: 0 10px;
    }

    .size-button.selected {
    border: 2px solid red;
    }
</style>

@code {
    [CascadingParameter]
    public CurrentUser CurrentUser { get; set; } = new();
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private NavMenu NavMenu { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public ViewParameters Content { get; set; } = new();
    [Parameter] public EventCallback OnCartUpdated { get; set; }

    private ApiRequestModel requestRestAPI = new ApiRequestModel();
    private ProductDto ProductModel = new ProductDto();
    private int Quantity = 1;
    private Guid SelectedSizeId = Guid.Empty;
    private decimal SizePrice = 0;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
        if (ProductModel.Sizes is not null && ProductModel.Sizes.Any())
        {
            SelectedSizeId = ProductModel.Sizes.First().Id;
            SizePrice = ProductModel.Sizes.First().AdditionalPrice;
        }
    }

    private async Task GetProduct()
    {
        requestRestAPI.Endpoint = $"api/Product/{Content.Id}";
        ResultAPI result = await CallApi.Get<ProductDto>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            ProductModel = result.Data as ProductDto ?? new ProductDto();
        }
        else
        {
            ToastService.ShowError("Không thể tải thông tin sản phẩm.");
        }
    }

    private void SelectSize(Guid sizeId, decimal sizePrice)
    {
        SelectedSizeId = sizeId;
        SizePrice = sizePrice;
        StateHasChanged();
    }

    private void IncreaseQuantity()
    {
        Quantity++;
        StateHasChanged();
    }

    private void DecreaseQuantity()
    {
        if (Quantity > 1) Quantity--;
        StateHasChanged();
    }

    private decimal TotalPrice => (ProductModel.BasePrice + SizePrice) * Quantity;

    private decimal TotalPriceEndown => (ProductModel.PriceEndown + SizePrice) * Quantity;

    private decimal discountPercent => Math.Round(((TotalPrice - TotalPriceEndown) / TotalPrice) * 100);


    private async Task AddProductToCart()
    {
        try
        {
            requestRestAPI.Endpoint = "api/Cart/AddProductToCart";

            AddProductToCartDto AddProductToCartDto = new AddProductToCartDto
                {
                    ProductId = ProductModel.Id,
                    UserId = CurrentUser.UserId,
                    Quantity = 1,
                    SizeId = SelectedSizeId
                };
            var result = await CallApi.Post<object>(requestRestAPI, AddProductToCartDto);

            // Xử lý kết quả từ API
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Đã thêm sản phẩm vào giỏ hàng.");
                await SharedService.TriggerUpdateAsync();
                await HideDialog();
            }
            else
            {
                ToastService.ShowError($"Không thể thêm sản phẩm: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi: {ex.Message}");
        }
    }
    private async Task HideDialog()
    {
        await Dialog.CloseAsync();
    }
}