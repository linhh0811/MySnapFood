@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Category
@using Service.SnapFood.Client.Dto.Product
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Service.SnapFood.Client.Components.Layout
    @foreach (var product in ProductDto)
    {
        <div class="col-md-3 col-sm-6 mb-4">
            <FluentCard class="h-100 position-relative" style="min-height: 300px;">
                <img src="@product.ImageUrl" style="height: 200px; object-fit: cover; width: 100%;" alt="@product.ProductName" />
                <div style="padding: 0; min-height: 120px;">
                    <FluentLabel Typo="Typography.H5">@product.ProductName</FluentLabel>
                    @if (!string.IsNullOrEmpty(product.SizeName))
                    {
                        <p class="card-title" style="margin: 0;padding-top:10px;">@product.SizeName</p>
                    }else
                    {
                        <p class="card-title" style="margin: 0;padding-top:10px">@product.CategoryName</p>

                    }

                </div>
                <div style="position: absolute; bottom: 0; left: 0; display: flex; align-items: center; gap: 10px; padding: 20px; width: 100%;">
                    <FluentLabel Typo="Typography.H4" Style="color: red; font-weight: bold;">
                        @product.BasePrice.ToString("N0") đ
                    </FluentLabel>
                    <FluentButton Appearance="Appearance.Accent"
                                  Title="Thêm sản phẩm"
                                  Style="padding: 0; margin-left: auto;"
                                  Type="ButtonType.Submit"
                                  OnClick="() => HandleClick(product.Id, product.SizeId)">
                        +
                    </FluentButton>
                </div>
            </FluentCard>
        </div>

    }

@code {
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private NavMenu NavMenu { get; set; } = default!;
    [Parameter]
    public List<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
    [Parameter]
    public CategoryDto OnCategorySelected { get; set; } = new CategoryDto();
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private List<ProductDto> ProductDto = new List<ProductDto>();
    [Parameter] public ViewParameters Content { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }
    protected override async Task OnParametersSetAsync()
    {

        await LoadProduct();
    }
    private async Task LoadProduct()
    {

        try
        {
            var baseQuery = new BaseQuery
                {

                    gridRequest = new GridRequest
                    {
                        page = 1,
                        pageSize = int.MaxValue,

                    }
                };
            requestRestAPI.Endpoint = "api/Product/GetPaged";

            ResultAPI result = await CallApi.Post<DataTableJson>(requestRestAPI, baseQuery);
            if (result.Status == StatusCode.OK && result.Data is DataTableJson dataTable)
            {
                var items = JsonSerializer.Deserialize<List<ProductDto>>(dataTable.Data.GetRawText(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<ProductDto>();


                ProductDto = items.Where(x => x.ModerationStatus == ModerationStatus.Approved && x.CategoryId == OnCategorySelected.Id).ToList();

            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách sản phẩm: {ex.Message}");
        }
    }

    private async Task OpenModalAdd(Guid id)
    {
        try
        {
            var parameters = new ViewParameters
                {
                    Id = id,

                    OnRefresh = EventCallback.Factory.Create(this, async () =>
                     {
                         await NavMenu.RefreshCartItemCount(); // Gọi cập nhật số lượng
                     })

                };
            var dialog = await DialogService.ShowDialogAsync<View>(parameters, new DialogParameters
                {
                    Title = "Thêm sản phẩm",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                    Modal = true,
                    Width = "800px",
                    ShowTitle = false,
                    ShowDismiss = false

                });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal thêm sản phẩm: {ex.Message}");
        }
    }

    private async Task HandleClick(Guid productId, string? sizeId)
    {
        if (!string.IsNullOrEmpty(sizeId))
        {
            await OpenModalAdd(productId);
        }
        else
        {
            await AddProductToCart(productId, null);
        }
    }
    private async Task AddProductToCart(Guid productId, Guid? sizeId)
    {
        try
        {
            // Lấy thông tin xác thực người dùng
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userIdClaim = user.FindFirst("user_id");

            // Kiểm tra xem người dùng đã đăng nhập chưa
            if (userIdClaim == null || !Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
                ToastService.ShowError("Vui lòng đăng nhập để thêm sản phẩm vào giỏ hàng.");
                Navigation.NavigateTo("/login");
                return;
            }

            // Tạo đối tượng DTO để gửi lên API
            var addToCartDto = new
            {
                UserId = userId,
                ProductId = productId,
                SizeId = sizeId, // Nếu sizeId là null, dùng Guid mặc định
                Quantity = 1 // Số lượng mặc định
            };

            // Cấu hình và gọi API
            Console.WriteLine($"Sending to API: {JsonSerializer.Serialize(addToCartDto)}");
            var requestRestAPI = new ApiRequestModel
                {
                    Endpoint = "api/cart/addproduct"
                };

            var result = await CallApi.Post<object>(requestRestAPI, addToCartDto);

            // Xử lý kết quả từ API
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Đã thêm sản phẩm vào giỏ hàng.");
                await NavMenu.RefreshCartItemCount(); // Cập nhật số lượng giỏ hàng
            }
            else
            {
                ToastService.ShowError($"Không thể thêm sản phẩm: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi: {ex.Message}");
        }
    }
}
