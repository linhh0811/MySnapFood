@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Product
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid
@using System.Text.Json
<div class="container row">
    @foreach (var product in ProductDto)
    {
        <div class="col-md-3 col-sm-6 mb-4">
            <FluentCard class="h-100 position-relative" style="min-height: 300px;">
                <img src="@product.ImageUrl" style="height: 200px; object-fit: cover; width: 100%;" alt="@product.ProductName" />
                <div style="padding: 10px; min-height: 120px;">
                    <FluentLabel Typo="Typography.H5">@product.ProductName</FluentLabel>
                </div>
                <div style="position: absolute; bottom: 0; left: 0; display: flex; align-items: center; gap: 10px; padding: 20px; width: 100%;">
                    <FluentLabel Typo="Typography.H4" Style="color: red; font-weight: bold;">
                        @product.BasePrice.ToString("N0") đ
                    </FluentLabel>
                    <FluentButton Appearance="Appearance.Accent"
                                  Title="Thêm sản phẩm"
                                  Style="padding: 0 10px; margin-left: auto;"
                                  Type="ButtonType.Submit"
                                  OnClick="() => HandleClick(product.Id, product.SizeId)">
                        +
                    </FluentButton>
                </div>
            </FluentCard>
        </div>
    }
</div>
@code {
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private List<ProductDto> ProductDto = new List<ProductDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }
    private async Task LoadProduct()
    {

        try
        {
            var baseQuery = new BaseQuery
                {

                    gridRequest = new GridRequest
                    {
                        page = 1,
                        pageSize = int.MaxValue,

                    }
                };
            requestRestAPI.Endpoint = "api/Product/GetPaged";

            ResultAPI result = await CallApi.Post<DataTableJson>(requestRestAPI, baseQuery);
            if (result.Status == StatusCode.OK && result.Data is DataTableJson dataTable)
            {
                var items = JsonSerializer.Deserialize<List<ProductDto>>(dataTable.Data.GetRawText(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<ProductDto>();


                ProductDto = items.Where(x => x.ModerationStatus == ModerationStatus.Approved).ToList();

            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách sản phẩm: {ex.Message}");
        }
    }

    private async Task OpenModalAdd(Guid id)
    {
        try
        {
            var parameters = new ViewParameters
                {
                    Id=id,                   
                };
            var dialog = await DialogService.ShowDialogAsync<View>(parameters, new DialogParameters
                {
                    Title = "Thêm sản phẩm",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                    Modal = true,
                    Width="800px",
                    ShowTitle=false,
                    ShowDismiss=false
                    
                });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi mở modal thêm sản phẩm: {ex.Message}");
        }
    }

    private async Task HandleClick(Guid productId,string? sizeId)
    {
        if (!string.IsNullOrEmpty(sizeId))
        {
            await OpenModalAdd(productId);
        }
    }
}
