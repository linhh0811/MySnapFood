@page "/Dat-Hang"
@page "/Dat-Hang/{Id}"

@using Service.SnapFood.Client.Components.Pages.Category
@using Service.SnapFood.Client.Dto
@using Service.SnapFood.Client.Dto.Category
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid
@using System.Text.Json
<br/>
<CategoryOrderHome CategoryId="@Id" OnCategorySelected="OnCategorySelected"></CategoryOrderHome>
<hr />
<div class="container row">
    @if (!IsLoading)
    {
        <Service.SnapFood.Client.Components.Pages.Product.Index OnCategorySelected="categorySelected"></Service.SnapFood.Client.Components.Pages.Product.Index>
        <Service.SnapFood.Client.Components.Pages.Combo.Index OnCategorySelected="categorySelected"></Service.SnapFood.Client.Components.Pages.Combo.Index>
    }
</div>


@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;
    private CategoryDto categorySelected = new();
    private bool IsLoading = true;
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    protected override void OnInitialized()
    {
        IsLoading = true;
        if (!string.IsNullOrEmpty(Id))
        {
            categorySelected = new CategoryDto()
            {
                Id=Id
            };

            OnCategorySelected(categorySelected);
        }
        IsLoading = false;
    }

    private void OnCategorySelected(CategoryDto category)
    {
        if (string.IsNullOrEmpty(Id))
        {
            categorySelected = category;
        }
    }
}
