@using Microsoft.FluentUI.AspNetCore.Components
<FluentPaginator State="@PaginationState" Style="width:100%;">
    <SummaryTemplate>
        <FluentStack Orientation="Orientation.Horizontal"
                     Style="justify-content: space-between; align-items: center; width: 100%; padding: 5px 0;gap:200px">
            <div style="display: flex; align-items: center; gap: 7px;">
                <div>Hiển thị</div>
                <FluentSelect Width="70px"
                              TOption="Option<int>"
                              Items="@itemsPerPageOptions"
                              OptionText="@(i => i.Text)"
                              OptionValue="@(i => i.Value.ToString())"
                              @bind-Value="SelectedPageSize"
                              @bind-Value:after="() => OnPageSizeChanged(SelectedPageSize)" />
                <div>bản ghi</div>
            </div>

            @{
                var startItem = PaginationState.CurrentPageIndex * PaginationState.ItemsPerPage + 1;
                var endItem = Math.Min(startItem + (int)PaginationState.ItemsPerPage - 1, (int)(PaginationState.TotalItemCount ?? 0));

                if (PaginationState.TotalItemCount == 0)
                {
                    startItem = 0;
                    endItem = 0;
                }
            }
            <div>
                Hiển thị @startItem đến @endItem của @PaginationState.TotalItemCount bản ghi
            </div>
        </FluentStack>
    </SummaryTemplate>
    <PaginationTextTemplate>
        <div style="display: flex; align-items: center; padding: 0 10px;">
            Trang @(PaginationState.CurrentPageIndex + 1) / @(PaginationState.LastPageIndex + 1)
        </div>
    </PaginationTextTemplate>
</FluentPaginator>

@code {
    [Parameter, EditorRequired] public PaginationState PaginationState { get; set; } = default!;

    [Parameter] public EventCallback<int> SelectedPageSizeChanged { get; set; }

    private string SelectedPageSize { get; set; } = "10";

    private List<Option<int>> itemsPerPageOptions = new()
    {
        new Option<int> { Value = 5, Text = "5" },
        new Option<int> { Value = 10, Text = "10" },
        new Option<int> { Value = 20, Text = "20" },
        new Option<int> { Value = 50, Text = "50" },
        new Option<int> { Value = 100, Text = "100" },
    };

    protected override async Task OnInitializedAsync()
    {
        if (PaginationState.ItemsPerPage > 100)
            PaginationState.ItemsPerPage = 10;
        SelectedPageSize = PaginationState.ItemsPerPage.ToString();
        await base.OnInitializedAsync();
    }

    private async Task OnPageSizeChanged(string val)
    {
        if (int.TryParse(val, out var intVal))
        {
            SelectedPageSize = val.ToString();
            await SelectedPageSizeChanged.InvokeAsync(intVal);
        }
    }

}
