@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.FluentUI.AspNetCore.Components
@using Service.SnapFood.Manage.Dto
@using Service.SnapFood.Manage.Dto.User
@using Service.SnapFood.Manage.Infrastructure.Services
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.Commons
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient

@implements IDialogContentComponent<EditOrUpdateParameters>

<FluentDialog @ref="Dialog" Modal="true" TrapFocus="true" Style="width: 500px;">
    <FluentDialogHeader>
        <h3>Thông tin tài khoản</h3>
    </FluentDialogHeader>

    <EditForm Model="UserModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <FluentMessageBar Title="Lỗi" Intent="@MessageIntent.Error">
                @ErrorMessage
            </FluentMessageBar>
        }

        <FluentStack Orientation="Orientation.Vertical" Gap="15">
            <FluentTextField Label="Họ tên" @bind-Value="UserModel.FullName" Style="width:100%;" />
            <ValidationMessage For="@(() => UserModel.FullName)" style="color:red" />

            <FluentTextField Label="Email" @bind-Value="UserModel.Email" Style="width:100%;" />
            <ValidationMessage For="@(() => UserModel.Email)" style="color:red" />

            <FluentTextField Label="Số điện thoại" @bind-Value="UserModel.Numberphone" Style="width:100%;" />
            <ValidationMessage For="@(() => UserModel.Numberphone)" style="color:red" />

            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" Gap="10">
                <FluentButton Appearance="Appearance.Neutral" @onclick="HideDialog" Disabled="@isSaving">Hủy</FluentButton>
                <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span style="margin-left: 8px;">Đang lưu...</span>
                    }
                    else
                    {
                        <span>Cập nhật</span>
                    }
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </EditForm>
</FluentDialog>

@code {


    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public EditOrUpdateParameters Content { get; set; } = new();
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private UserDto UserModel { get; set; } = new UserDto();

    private string? ErrorMessage;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        if (Content.IsEditMode)
        {
            await GetUser();
        }
    }

    private async Task GetUser()
    {

        requestRestAPI.Endpoint = $"api/User/{Content.Id}";
        ResultAPI result = await CallApi.Get<UserDto>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            UserModel = result.Data as UserDto ?? new UserDto();
        }

    }


    private async Task<bool> UpdateModule(Guid id, UserDto updateRequest)
    {
        ErrorMessage = null;
        try
        {
            isSaving = true;

            requestRestAPI.Endpoint = $"api/User/{id}";
            ResultAPI result = await CallApi.Put(requestRestAPI, updateRequest);
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Sửa thành công.");
                return true;
            }
            else
            {
                isSaving = false;
                ErrorMessage = "Sửa thất bại: " + result.Message;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSaving = false;
            ErrorMessage = "Sửa thất bại: " + ex.Message;
            return false;
        }
    }

    private async Task HandleSubmit()
    {
        bool result = false;

        if (Content.IsEditMode)
        {
            result = await UpdateModule(Content.Id, UserModel);
        }
        if (result)
        {
            await Dialog.CloseAsync();
            await Content.OnRefresh.InvokeAsync();
        }

    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (Content.IsEditMode && Content.Id != Guid.Empty)
        {
            await GetUser();
        }
    }


    private async Task HideDialog()
    {
        await Dialog.CloseAsync();
    }
}
