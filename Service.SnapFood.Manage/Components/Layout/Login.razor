@using Service.SnapFood.Manage.Dto.Login
@using Service.SnapFood.Manage.Infrastructure.Services

@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using System.Net.Http.Json
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Đăng nhập</title>
    <script src="https://www.google.com/recaptcha/api.js?render=explicit" async defer></script>
    <script src="\Js\recaptchaInterop.js"></script>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(135deg, #3498db, #8e44ad);
            margin: 0;
        }

    </style>
</head>
<body>
    <div class="login-container">
        @if (!IsLayLaiMatKhau)
        {
            <FluentCard Style="padding:30px;width:400px;">
                <FluentLabel Typo="Typography.H2" Style="padding-bottom:10px">Đăng nhập hệ thống</FluentLabel>
                <EditForm Model="loginDto" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <FluentMessageBar Title="Lỗi" Intent="@MessageIntent.Error" Style="margin-bottom: 1rem;">
                            @ErrorMessage
                        </FluentMessageBar>
                    }

                    <FluentStack Orientation="Orientation.Vertical" Style="gap: 1rem;">
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentLabel Weight="FontWeight.Bold">Email:</FluentLabel>
                            <FluentTextField @bind-Value="loginDto.Email" Placeholder="Nhập email" Style="width: 100%;" />
                            <ValidationMessage style="color:red" For="@(() => loginDto.Email)" />
                        </FluentStack>

                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentLabel Weight="FontWeight.Bold">Mật khẩu:</FluentLabel>
                            <FluentTextField @bind-Value="loginDto.Password" TextFieldType="TextFieldType.Password" Placeholder="Nhập mật khẩu" Style="width: 100%;" />
                            <ValidationMessage style="color:red" For="@(() => loginDto.Password)" />
                        </FluentStack>

                        <div id="recaptcha-login" class="recaptcha-box"></div>

                        <FluentButton Loading="@loading" Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">
                            Đăng nhập
                        </FluentButton>
                        <hr />
                        <FluentButton Loading="@loading" Appearance="Appearance.Lightweight" Style="width: 100%;" OnClick="() => DoiTrangThai(true)">
                            Bạn quên mật khẩu?
                        </FluentButton>


                    </FluentStack>
                </EditForm>
            </FluentCard>
        }
        else
        {
            <FluentCard Style="padding:30px;width:400px;">
                <FluentLabel Typo="Typography.H2" Style="padding-bottom:10px">Lấy lại mật khẩu</FluentLabel>
                <EditForm Model="layMatKhauDto" OnValidSubmit="Confirm">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <FluentMessageBar Title="Lỗi" Intent="@MessageIntent.Error" Style="margin-bottom: 1rem;">
                            @ErrorMessage
                        </FluentMessageBar>
                    }

                    @if (forgotStep == 1)
                    {
                        <FluentStack Orientation="Orientation.Vertical" Style="gap: 1rem;">
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">Email:</FluentLabel>
                                <FluentTextField @bind-Value="layMatKhauDto.Email" Placeholder="Nhập email" Style="width: 100%;" />
                                <ValidationMessage style="color:red" For="@(() => layMatKhauDto.Email)" />

                                @if (!string.IsNullOrEmpty(CheckEmail))
                                {
                                    <div class="validation-message" style="color:red">@CheckEmail.</div>

                                }
                            </FluentStack>

                            <div id="recaptcha-forgot" class="recaptcha-box"></div>

                            <FluentStack Orientation="Orientation.Horizontal" Style="gap: 1rem; align-items: flex-end;">
                                <FluentButton @onclick="SendOTPAsync"
                                              Disabled="@isSendingOTP"
                                              Loading="@loading"
                                              Appearance="Appearance.Accent"
                                              Style="min-width: 100px;">
                                    @(isSendingOTP ? $"Gửi lại ({countdown}s)" : (otpSent ? "Gửi lại mã" : "Gửi mã OTP"))
                                </FluentButton>
                            </FluentStack>

                            @if (otpSent)
                            {
                                <FluentStack Orientation="Orientation.Vertical">
                                    <FluentLabel Weight="FontWeight.Bold">Mã xác nhận:</FluentLabel>
                                    <FluentTextField @bind-Value="layMatKhauDto.OtpCode" Placeholder="Nhập mã xác nhận" Style="width: 100%;" />
                                    <ValidationMessage style="color:red" For="@(() => layMatKhauDto.OtpCode)" />
                                </FluentStack>

                                <FluentButton @onclick="VerifyOtpAsync"
                                              Disabled="@isVerifying"
                                              Loading="@loading"
                                              Appearance="Appearance.Accent"
                                              Style="width: 100%;">
                                    Xác thực OTP
                                </FluentButton>
                            }

                            <hr />
                            <FluentButton Loading="@loading" Appearance="Appearance.Lightweight" Style="width: 100%;" OnClick="() => DoiTrangThai(false)" IconStart="@(new Icons.Regular.Size20.ArrowLeft())">
                                Quay lại
                            </FluentButton>
                        </FluentStack>
                    }
                    else if (forgotStep == 2)
                    {
                        <FluentStack Orientation="Orientation.Vertical" Style="gap: 1rem;">
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">Mật khẩu mới:</FluentLabel>
                                <FluentTextField @bind-Value="layMatKhauDto.PasswordMoi" TextFieldType="TextFieldType.Password" Placeholder="Nhập mật khẩu mới" Style="width: 100%;" />
                                <ValidationMessage style="color:red" For="@(() => layMatKhauDto.PasswordMoi)" />
                            </FluentStack>

                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentLabel Weight="FontWeight.Bold">Xác nhận mật khẩu mới:</FluentLabel>
                                <FluentTextField @bind-Value="layMatKhauDto.PasswordConfirmMoi" TextFieldType="TextFieldType.Password" Placeholder="Xác nhận nhập mật khẩu mới" Style="width: 100%;" />
                                <ValidationMessage style="color:red" For="@(() => layMatKhauDto.PasswordConfirmMoi)" />
                            </FluentStack>

                            <FluentButton Loading="@loading" Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">
                                Xác nhận
                            </FluentButton>
                            <hr />
                            <FluentButton Loading="@loading" Appearance="Appearance.Lightweight" Style="width: 100%;" OnClick="BackToStepOne" IconStart="@(new Icons.Regular.Size20.ArrowLeft())">
                                Quay lại
                            </FluentButton>
                        </FluentStack>
                    }
                </EditForm>
            </FluentCard>
        }



    </div>
</body>
</html>

@code {
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;

    private ApiRequestModel requestRestAPI = new ApiRequestModel();

    private LoginDto loginDto { get; set; } = new LoginDto();
    private OtpConfirmDto layMatKhauDto { get; set; } = new OtpConfirmDto();

    private bool loading = false;
    private bool IsLayLaiMatKhau = false;

    private string? ErrorMessage;
    public string CheckEmail { get; set; } = string.Empty;

    private int forgotStep = 1;  // Bước 1: Nhập email, gửi và xác thực OTP, Bước 2: Nhập mật khẩu mới
    private bool otpSent = false;
    private bool isSendingOTP = false;
    private bool isVerifying = false;
    private int countdown = 60;
    private Timer? timer;

    private int widgetIdLogin = -1;
    private int widgetIdForgot = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string siteKey = "6LdNyqMrAAAAAAwO8OMLCHBujdzwa-XzlB3v6GPG";

        try
        {
            if (!IsLayLaiMatKhau)
            {
                // Kiểm tra xem đã render chưa
                widgetIdLogin = await JSRuntime.InvokeAsync<int>("recaptchaInterop.getWidgetId", "recaptcha-login");
                if (widgetIdLogin == -1)
                {
                    // Chỉ render nếu chưa
                    widgetIdLogin = await JSRuntime.InvokeAsync<int>("recaptchaInterop.render", "recaptcha-login", siteKey);
                }
            }
            else if (forgotStep == 1)
            {
                // Kiểm tra xem đã render chưa
                widgetIdForgot = await JSRuntime.InvokeAsync<int>("recaptchaInterop.getWidgetId", "recaptcha-forgot");
                if (widgetIdForgot == -1)
                {
                    // Chỉ render nếu chưa
                    widgetIdForgot = await JSRuntime.InvokeAsync<int>("recaptchaInterop.render", "recaptcha-forgot", siteKey);
                }
            }
        }
        catch (JSException ex)
        {
            // Log lỗi mà không throw để tránh circuit disconnect
            Console.WriteLine($"Lỗi reCAPTCHA: {ex.Message}. Bỏ qua để tránh disconnect circuit.");
            // Không retry, vì có thể là "already rendered" - chúng ta đã xử lý bằng getWidgetId
        }
    }
    private async Task<bool> LoginNhanVien(LoginDto loginDto)
    {
        ErrorMessage = null;
        try
        {
            loading = true;
            requestRestAPI.Endpoint = "api/Auth/Login";
            ResultAPI response = await CallApi.Post<Dto.Auth.AuthResponseDto>(requestRestAPI, loginDto);
            if (response.Status == StatusCode.OK)
            {
                var result = response.Data as Dto.Auth.AuthResponseDto;
                if (result?.Token != null)
                {
                    await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(result);
                    Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
                }
                ToastService.ShowSuccess("Đăng nhập thành công.");
                return true;
            }
            else
            {
                loading = false;
                ErrorMessage = "Thông tin không chính xác";
                return false;
            }
        }
        catch (Exception ex)
        {
            loading = false;
            ErrorMessage = ex.Message;
            return false;
        }
    }

    private async Task HandleSubmit()
    {
        // Lấy token reCAPTCHA trước khi submit
        string recaptchaToken = await JSRuntime.InvokeAsync<string>("recaptchaInterop.getResponse", widgetIdLogin);

        if (string.IsNullOrEmpty(recaptchaToken))
        {
            ErrorMessage = "Vui lòng xác nhận bạn không phải là robot.";
            StateHasChanged();
            return;
        }

        // Thêm token vào DTO
        loginDto.RecaptchaToken = recaptchaToken;

        bool result = await LoginNhanVien(loginDto);
        if (result)
        {
            ToastService.ShowSuccess("Đăng nhập thành công!");
        }
        else
        {
            // Reset reCAPTCHA nếu thất bại
            await JSRuntime.InvokeVoidAsync("recaptchaInterop.reset", widgetIdLogin);
        }
    }

    private void DoiTrangThai(bool trangThai)
    {
        if (trangThai)
        {
            // Không cần reset widgetIdLogin nữa
        }
        else
        {
            // Không cần reset widgetIdForgot nữa
        }
        IsLayLaiMatKhau = trangThai;
        forgotStep = 1;
        otpSent = false;
        isSendingOTP = false;
        timer?.Dispose();
        CheckEmail = string.Empty;
        ErrorMessage = string.Empty;
        layMatKhauDto = new OtpConfirmDto();
        StateHasChanged();
    }
    private void BackToStepOne()
    {
        widgetIdForgot = -1;
        forgotStep = 1;
        otpSent = false;
        isSendingOTP = false;
        timer?.Dispose();
        StateHasChanged();
    }


    private async Task SendOTPAsync()
    {
        try
        {
            if (isSendingOTP) return;

            loading = true;

            if (string.IsNullOrEmpty(layMatKhauDto.Email))
            {
                CheckEmail = "Vui lòng nhập email";
                StateHasChanged();
                return;
            }

            // Lấy token reCAPTCHA trước khi gửi
            string recaptchaToken = await JSRuntime.InvokeAsync<string>("recaptchaInterop.getResponse", widgetIdForgot);

            if (string.IsNullOrEmpty(recaptchaToken))
            {
                CheckEmail = "Vui lòng xác nhận bạn không phải là robot.";
                StateHasChanged();
                return;
            }

            layMatKhauDto.RecaptchaToken = recaptchaToken;
            isSendingOTP = true;

            requestRestAPI.Endpoint = "api/User/SendOtp";
            ResultAPI result = await CallApi.Put(requestRestAPI, layMatKhauDto);

            if (result.Status == StatusCode.OK)
            {

                otpSent = true;
                countdown = 60;
                StartCountdown();
                ToastService.ShowSuccess("Mã xác nhận đã được gửi!");
            }
            else
            {
                isSendingOTP = false;
                ToastService.ShowError("" + result.Message);
                await JSRuntime.InvokeVoidAsync("recaptchaInterop.reset", widgetIdForgot);
            }

        }
        catch (Exception ex)
        {

            isSendingOTP = false;
            ToastService.ShowError("" + ex.Message);
            await JSRuntime.InvokeVoidAsync("recaptchaInterop.reset", widgetIdForgot);
        }
        finally
        {
            loading = false;
            StateHasChanged();

        }

    }

    private async Task VerifyOtpAsync()
    {
        try
        {
            loading = true;
            isVerifying = true;
            CheckEmail = "";

            if (string.IsNullOrEmpty(layMatKhauDto.OtpCode))
            {
                CheckEmail = "Vui lòng nhập mã OTP.";
                return;
            }

            var verifyDto = new OtpConfirmDto { Email = layMatKhauDto.Email, OtpCode = layMatKhauDto.OtpCode };

            requestRestAPI.Endpoint = "api/User/VerifyOtp";
            ResultAPI result = await CallApi.Put(requestRestAPI, verifyDto);

            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Xác thực OTP thành công!");
                timer?.Dispose();
                isSendingOTP = false;
                forgotStep = 2;
            }
            else
            {
                CheckEmail = "Xác thực OTP thất bại: " + result.Message;
            }
        }
        catch (Exception ex)
        {
            CheckEmail = "Lỗi: " + ex.Message;
        }
        finally
        {
            isVerifying = false;
            loading = false;
            StateHasChanged();
        }
    }

    private async Task Confirm()
    {
        try
        {
            loading = true;

            requestRestAPI.Endpoint = "api/User/LayMatKhau";
            ResultAPI result = await CallApi.Put(requestRestAPI, layMatKhauDto);

            if (result.Status == StatusCode.OK)
            {

                ToastService.ShowSuccess("Mật khẩu đã được thay đổi");
                DoiTrangThai(false);
            }
            else
            {
                ToastService.ShowError("Lỗi: " + result.Message);
            }
        }
        catch (Exception ex)
        {

            ToastService.ShowError("Lỗi: " + ex.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();

        }

    }


    private void StartCountdown()
    {
        timer?.Dispose(); // Hủy timer cũ nếu có

        timer = new Timer(state =>
        {
            if (countdown > 0)
            {
                countdown--;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                isSendingOTP = false;
                InvokeAsync(async () =>
            {
                await JSRuntime.InvokeVoidAsync("recaptchaInterop.reset", widgetIdForgot);
                StateHasChanged();
            });
                timer?.Dispose();
            }
        }, null, 0, 1000); // 1000ms = 1 giây
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}