@namespace Service.SnapFood.Manage.Components.Pages.Manage.Product
@using Microsoft.FluentUI.AspNetCore.Components
@using Service.SnapFood.Manage.Dto
@using Service.SnapFood.Manage.Dto.Category
@using Service.SnapFood.Manage.Dto.ProductDto
@using Service.SnapFood.Manage.Dto.SizeDto
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@inherits ComponentBase
@implements IDialogContentComponent<EditOrUpdateParameters>


<FluentDialog @ref="Dialog" Modal="true" TrapFocus="true" Style="width: 500px;">
    <FluentDialogHeader>
        <h3>@(Content.IsEditMode ? "Sửa sản phẩm" : "Thêm sản phẩm")</h3>
    </FluentDialogHeader>

    <EditForm Model="ProductModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <FluentMessageBar Title="Lỗi" Intent="@MessageIntent.Error">
                @ErrorMessage
            </FluentMessageBar>
        }
        <FluentStack Orientation="Orientation.Vertical" Gap="15">

            <FluentTextField Label="Tên sản phẩm" @bind-Value="ProductModel.ProductName" Style="width:100%;" />
            <ValidationMessage style="color:red" For="@(() => ProductModel.ProductName)" />
            <InputFile OnChange="FileSelect" accept=".jpg, .jpeg, .tiff"></InputFile>
            @if (imagePreviewUrl != null)
            {
                <img src="@imagePreviewUrl" style="max-width: 200px; margin-top: 10px;" />
            }

            <FluentNumberField Label="Giá" @bind-Value="ProductModel.BasePrice" Style="width:100%;" />
            <ValidationMessage style="color:red" For="@(() => ProductModel.BasePrice)" />
            <FluentSelect Label="Phân loại" 
            @bind-Value="ProductModel.CategoryId" 
            Items="CategoryList" 
            OptionText="@(x => x.CategoryName)" 
            OptionValue="@(x => x.Id)" 
            Nullable="true" 
            Style="width:100%;" 
            Height="220px"
            Position="SelectPosition.Below">
            </FluentSelect>
            <FluentSelect Label="Kích cỡ"
            @bind-Value="ProductModel.SizeId"
            Items="SizeList"
            OptionText="@(x => x.SizeName)"
            OptionValue="@(x => x.Id)"
            Nullable="true"
            Style="width:100%;"
            Height="220px"
            Position="SelectPosition.Below">
            </FluentSelect>
            <FluentTextArea Label="Ghi chú" @bind-Value="ProductModel.Description" Style="width:100%" Rows="3" Resize="TextAreaResize.Both" />          
            <ValidationMessage style="color:red" For="@(() => ProductModel.Description)" />

            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" Gap="10">
                <FluentButton Appearance="Appearance.Neutral" @onclick="HideDialog" Disabled="@isSaving">Hủy</FluentButton>
                <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span style="margin-left: 8px;">Đang lưu...</span>
                    }
                    else
                    {
                        <span>Lưu</span>
                    }
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </EditForm>
</FluentDialog>
@code{
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public EditOrUpdateParameters Content { get; set; } = new();
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private ProductDto ProductModel { get; set; } = new ProductDto();
    private List<CategoryDto> CategoryList { get; set; } = new List<CategoryDto>();
    private List<SizeDto> SizeList { get; set; } = new List<SizeDto>();

    private string? ErrorMessage;
    private bool isSaving = false;

    private string imagePreviewUrl = string.Empty;


    private async Task FileSelect(InputFileChangeEventArgs e)
    {
        ProductModel.Image = e.File;

        var format = "image/jpeg";
        using var imageFile = e.File.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // Giới hạn 5MB
        var memoryStream = new MemoryStream();

        await imageFile.CopyToAsync(memoryStream);

        imagePreviewUrl = $"data:{format};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategory();
        await GetSize();
    }

    private async Task GetCategory()
    {

        requestRestAPI.Endpoint = $"api/Category/";
        ResultAPI result = await CallApi.Get<List<CategoryDto>>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            CategoryList = result.Data as List<CategoryDto> ?? new List<CategoryDto>();
            CategoryList = CategoryList.Where(x => x.ModerationStatus == ModerationStatus.Approved).ToList();
        }
    }
    private async Task GetSize()
    {

        requestRestAPI.Endpoint = $"api/Size/GetSizeSelect";
        ResultAPI result = await CallApi.Get<List<SizeDto>>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            SizeList = result.Data as List<SizeDto> ?? new List<SizeDto>();
        }
        SizeList.Insert(0, new SizeDto
            {
                Id=null,
                SizeName = "Không có kích cỡ"

            });
    }
    private async Task<bool> CreateModule(ProductDto createRequest)
    {
        ErrorMessage = null;
        try
        {
            isSaving = true;
            requestRestAPI.Endpoint = "api/Product";
            ResultAPI result = await CallApi.Post<ProductDto>(requestRestAPI, createRequest);
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Thêm sản phẩm thành công.");
                return true;
            }
            else
            {
                isSaving = false;
                ErrorMessage = "Thêm sản phẩm thất bại: " + result.Message;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSaving = false;
            ErrorMessage = "Thêm sản phẩm thất bại: " + ex.Message;
            return false;
        }
    }

    private async Task<bool> UpdateModule(Guid id, ProductDto updateRequest)
    {
        ErrorMessage = null;
        try
        {
            isSaving = true;
            requestRestAPI.Endpoint = $"api/Product/{id}";
            ResultAPI result = await CallApi.Put(requestRestAPI, updateRequest);
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Sửa sản phẩm thành công.");
                return true;
            }
            else
            {
                isSaving = false;
                ErrorMessage = "Sửa sản phẩm thất bại: " + result.Message;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSaving = false;
            ErrorMessage = "Sửa sản phẩm thất bại: " + ex.Message;
            return false;
        }
    }

    private async Task HandleSubmit()
    {
        bool result = false;

        if (Content.IsEditMode)
        {
            result = await UpdateModule(Content.Id, ProductModel);
        }
        else
        {
            result = await CreateModule(ProductModel);
        }

        if (result)
        {
            await Dialog.CloseAsync();
            await Content.OnRefresh.InvokeAsync();
        }

    }
    private async Task HideDialog()
    {
        await Dialog.CloseAsync();
    }
}