@namespace Service.SnapFood.Manage.Components.Pages.Manage.Product
@using Microsoft.FluentUI.AspNetCore.Components
@using Service.SnapFood.Manage.Dto
@using Service.SnapFood.Manage.Dto.Category
@using Service.SnapFood.Manage.Dto.ProductDto
@using Service.SnapFood.Manage.Dto.Size
@using Service.SnapFood.Manage.Infrastructure.Services
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@inherits ComponentBase
@implements IDialogContentComponent<EditOrUpdateParameters>


<FluentDialog @ref="Dialog" Modal="true" TrapFocus="true" Style="width: 500px;">
    <FluentDialogHeader>
        <h3>@(Content.IsEditMode ? "Sửa sản phẩm" : "Thêm sản phẩm")</h3>
    </FluentDialogHeader>

    <EditForm Model="ProductModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <FluentMessageBar Title="Lỗi" Intent="@MessageIntent.Error">
                @ErrorMessage
            </FluentMessageBar>
        }
        <FluentStack Orientation="Orientation.Vertical" Gap="15">

            <FluentTextField Label="Tên sản phẩm" @bind-Value="ProductModel.ProductName" Style="width:100%;" />
            <ValidationMessage style="color:red" For="@(() => ProductModel.ProductName)" />
            <InputFile OnChange="FileSelect" ></InputFile>
            @if (!string.IsNullOrEmpty(imagePreviewUrl))
            {
                <img src="@imagePreviewUrl" style="max-width: 200px; margin-top: 10px;" />
            }
            else
            {
                <span>Ảnh trống!</span>
            }
            <ValidationMessage style="color:red" For="@(() => ProductModel.ImageUrl)" />


            <FluentNumberField Label="Giá" @bind-Value="ProductModel.BasePrice" Style="width:100%;" />
            <ValidationMessage style="color:red" For="@(() => ProductModel.BasePrice)" />
            <FluentSelect Label="Phân loại"
                          @bind-Value="ProductModel.CategoryId"
                          Items="CategoryList"
                          OptionText="@(x => x.CategoryName)"
                          OptionValue="@(x => x.Id)"
                          Nullable="true"
                          Style="width:100%;"
                          Height="220px"
                          Position="SelectPosition.Below"
                          OptionDisabled="@(x => x.ModerationStatus == ModerationStatus.Rejected && x.Id != ProductModel.CategoryId)">
                <OptionTemplate Context="category">
                    @if (category.ModerationStatus == ModerationStatus.Rejected)
                    {
                        <span>
                            <span style="color: gray; text-decoration: line-through;">@category.CategoryName</span>
                            <span style="color: red;"> (Ngừng hoạt động)</span>
                        </span>
                    }
                    else
                    {
                        <span>@category.CategoryName</span>
                    }
                </OptionTemplate>
            </FluentSelect>
            <ValidationMessage style="color:red" For="@(() => ProductModel.CategoryId)" />
            
            <FluentSelect Label="Kích cỡ"
                          @bind-Value="ProductModel.SizeId"
                          Items="SizeList"
                          OptionText="@(x => x.SizeName)"
                          OptionValue="@(x => x.Id)"
                          Nullable="true"
                          Style="width:100%;"
                          Height="220px"
                          Position="SelectPosition.Below"
                          OptionDisabled="@(x => x.ModerationStatus == ModerationStatus.Rejected && x.Id != ProductModel.SizeId)">
                <OptionTemplate Context="size">
                    @if (size.ModerationStatus == ModerationStatus.Rejected)
                    {
                        <span>
                            <span style="color: gray; text-decoration: line-through;">@size.SizeName</span>
                            <span style="color: red;"> (Ngừng hoạt động)</span>
                        </span>
                    }
                    else
                    {
                        <span>@size.SizeName</span>
                    }
                </OptionTemplate>
            </FluentSelect>
            <FluentTextArea Label="Ghi chú" @bind-Value="ProductModel.Description" Style="width:100%" Rows="3" Resize="TextAreaResize.Both" />          
            <ValidationMessage style="color:red" For="@(() => ProductModel.Description)" />

            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" Gap="10">
                <FluentButton Appearance="Appearance.Neutral" @onclick="HideDialog" Disabled="@isSaving">Hủy</FluentButton>
                <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span style="margin-left: 8px;">Đang lưu...</span>
                    }
                    else
                    {
                        <span>Lưu</span>
                    }
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </EditForm>
</FluentDialog>
@code{
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private ImageService ImageUploadService { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public EditOrUpdateParameters Content { get; set; } = new();
    private ApiRequestModel requestRestAPI = new ApiRequestModel() { };
    private ProductDto ProductModel { get; set; } = new ProductDto();
    private List<CategoryDto> CategoryList { get; set; } = new List<CategoryDto>();
    private List<SizeDto> SizeList { get; set; } = new List<SizeDto>();

    private string? ErrorMessage;
    private bool isSaving = false;

    private string imagePreviewUrl = string.Empty;
    private IBrowserFile ImageFile { get; set; } = default!;


    private async Task FileSelect(InputFileChangeEventArgs e)
    {
        ImageFile = e.File;
        ProductModel.ImageUrl = "A";
        var format = "image/jpeg";
        using var imageFile = e.File.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // Giới hạn 5MB
        var memoryStream = new MemoryStream();

        await imageFile.CopyToAsync(memoryStream);

        imagePreviewUrl = $"data:{format};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategory();
        await GetSize();
        if (Content.IsEditMode)
        {
            await GetProduct();
        }
    }

    private async Task GetCategory()
    {

        requestRestAPI.Endpoint = $"api/Category/";
        ResultAPI result = await CallApi.Get<List<CategoryDto>>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            CategoryList = result.Data as List<CategoryDto> ?? new List<CategoryDto>();
            ProductModel.CategoryId = CategoryList.First(x=>x.ModerationStatus==ModerationStatus.Approved).Id??string.Empty;
        }
    }
    private async Task GetSize()
    {

        requestRestAPI.Endpoint = $"api/Size/GetSizeSelect";
        ResultAPI result = await CallApi.Get<List<SizeDto>>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            SizeList = result.Data as List<SizeDto> ?? new List<SizeDto>();
        }
        SizeList.Insert(0, new SizeDto
            {
                Id=Convert.ToString(Guid.Empty),
                SizeName = "Không có kích cỡ"

            });
    }

    private async Task GetProduct()
    {

        requestRestAPI.Endpoint = $"api/Product/{Content.Id}";
        ResultAPI result = await CallApi.Get<ProductDto>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            ProductModel = result.Data as ProductDto ?? new ProductDto();
            imagePreviewUrl = ProductModel.ImageUrl;
        }

    }
    private async Task<bool> CreateModule(ProductDto createRequest)
    {
        ErrorMessage = null;
        try
        {
            isSaving = true;
            var fileName = await ImageUploadService.SaveImageAsync(ImageFile);
            createRequest.ImageUrl = ImageUploadService.GetImageUrl(fileName);
            
            requestRestAPI.Endpoint = "api/Product";
            ResultAPI result = await CallApi.Post<ProductDto>(requestRestAPI, createRequest);
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Thêm sản phẩm thành công.");
                return true;
            }
            else
            {
                isSaving = false;
                ErrorMessage = "Thêm sản phẩm thất bại: " + result.Message;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSaving = false;
            ErrorMessage = "Thêm sản phẩm thất bại: " + ex.Message;
            return false;
        }
    }

    private async Task<bool> UpdateModule(Guid id, ProductDto updateRequest)
    {
        ErrorMessage = null;
        try
        {
            isSaving = true;
            if (ImageFile is not null)
            {
                var fileName = await ImageUploadService.SaveImageAsync(ImageFile);
                updateRequest.ImageUrl = ImageUploadService.GetImageUrl(fileName);
            }
           
            requestRestAPI.Endpoint = $"api/Product/{id}";
            if (string.IsNullOrEmpty(updateRequest.SizeId))
            {
                updateRequest.SizeId = null;
            }
            ResultAPI result = await CallApi.Put(requestRestAPI, updateRequest);
            if (result.Status == StatusCode.OK)
            {
                ToastService.ShowSuccess("Sửa sản phẩm thành công.");
                return true;
            }
            else
            {
                isSaving = false;
                ErrorMessage = "Sửa sản phẩm thất bại: " + result.Message;
                return false;
            }
        }
        catch (Exception ex)
        {
            isSaving = false;
            ErrorMessage = "Sửa sản phẩm thất bại: " + ex.Message;
            return false;
        }
    }

    private async Task HandleSubmit()
    {
        bool result = false;

        if (Content.IsEditMode)
        {
            result = await UpdateModule(Content.Id, ProductModel);
        }
        else
        {
            result = await CreateModule(ProductModel);
        }

        if (result)
        {
            await Dialog.CloseAsync();
            await Content.OnRefresh.InvokeAsync();
        }

    }
    private async Task HideDialog()
    {
        await Dialog.CloseAsync();
    }
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
    $(document).ready(function () {
        // 1️⃣ Lấy danh sách tỉnh/thành phố
        $.getJSON("https://provinces.open-api.vn/api/?depth=2", function (data) {
            data.forEach((province) => {
                $("#province").append(
                    `<option value="${province.name}" data-code="${province.code}">${province.name}</option>`
                );
            });
        });

        // 2️⃣ Khi chọn Tỉnh/Thành phố, load Quận/Huyện
        $("#province").change(function () {
            let provinceCode = $("#province option:selected").data("code");
            $("#district").html('<option value="">Quận/Huyện</option>');
            $("#ward").html('<option value="">Xã/Phường</option>');

            if (provinceCode) {
                $.getJSON(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`, function (data) {
                    data.districts.forEach((district) => {
                        $("#district").append(
                            `<option value="${district.name}" data-code="${district.code}">${district.name}</option>`
                        );
                    });
                });
            }
        });

        // 3️⃣ Khi chọn Quận/Huyện, load Xã/Phường
        $("#district").change(function () {
            let districtCode = $("#district option:selected").data("code");
            $("#ward").html('<option value="">Xã/Phường</option>');

            if (districtCode) {
                $.getJSON(`https://provinces.open-api.vn/api/d/${districtCode}?depth=2`, function (data) {
                    data.wards.forEach((ward) => {
                        $("#ward").append(
                            `<option value="${ward.name}">${ward.name}</option>`
                        );
                    });
                });
            }
        });
    });

</script>