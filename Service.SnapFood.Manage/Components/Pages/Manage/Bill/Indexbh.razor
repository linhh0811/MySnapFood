 @page "/Quan-Ly/Bill/BanHang"

@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Service.SnapFood.Manage.Dto
@using Service.SnapFood.Manage.Dto.BillDto
@using System.Text.Json
@using Service.SnapFood.Manage.Enums
@using Service.SnapFood.Manage.Query
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid

@inject NavigationManager navigation
@namespace Service.SnapFood.Manage.Components.Pages.Manage.Bill

<FluentStack Orientation="Orientation.Vertical" VerticalGap="12" Style="width:100%;">
    <h2>Danh sách hóa đơn</h2>
     <div style="display: flex; align-items: center; gap: 10px;">
    <FluentSearch Style="min-width:200px;" @bind-Value="SearchKeyword" @bind-Value:after=RefreshDataAsync Placeholder="Nhập vào từ khóa" />



   <FluentSelect Items="_SelectTrangThai"
                  @bind-Value="SelectedTrangThai"
                  @bind-Value:after="RefreshDataAsync"
                  OptionText="@(x => x.Value)"
                  OptionValue="@(x => x.Key)"
                  Style="width:100%"
                  Position="SelectPosition.Below"
                  Width="150px;">
    </FluentSelect>
    </div>
    <FluentDataGrid Style="width:100%;" @ref="BillGrid"
                    TGridItem="BillDto"
                    ItemsProvider="LoadBills"
                    Pagination="@pagination"
                    ResizableColumns="false"
                    RowSize="DataGridRowSize.Large"
                    ShowHover="true"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    GridTemplateColumns="1.5fr 2.5fr 2fr 2fr 2.5fr 3fr">

        <TemplateColumn Title="Mã hóa đơn" Context="item">
            @item.BillCode
        </TemplateColumn>
        <TemplateColumn Title="Người dùng" Context="item">
            @item.FullName
        </TemplateColumn>
        <TemplateColumn Title="Trạng thái" Context="item">
            @GetStatusText(item.Status)
        </TemplateColumn>

        <TemplateColumn Title="Tổng tiền" Context="item">
            @item.TotalAmount.ToString("N0") đ
        </TemplateColumn>
        <TemplateColumn Title="Tiền khuyến mãi" Context="item">
            @item.TotalAmountEndow.ToString("N0") đ
        </TemplateColumn>
        <TemplateColumn Title="Ngày tạo" Context="item">
            @item.Created.ToString("dd/MM/yyyy HH:mm")
        </TemplateColumn>
        <TemplateColumn Title="" Context="item">
            <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => GoToDetail(item.Id))" Title="Xem chi tiết">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Eye())" />
            </FluentButton>
        </TemplateColumn>




    </FluentDataGrid>

    <Paginator PaginationState="@pagination" SelectedPageSizeChanged="RefresData" />
</FluentStack>

@code {
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    private ApiRequestModel requestRestAPI = new ApiRequestModel();
    protected FluentDataGrid<BillDto>? BillGrid { get; set; } = default!;
    protected string SearchKeyword { get; set; } = string.Empty;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private Dictionary<String, String> _SelectTrangThai = new Dictionary<string, string>();
    private string SelectedTrangThai = "None";
    private async ValueTask<GridItemsProviderResult<BillDto>> LoadBills(GridItemsProviderRequest<BillDto> request)
    {
        try
        {
            StatusOrder? selectedTrangThai = Enum.TryParse<StatusOrder>(SelectedTrangThai, out var parsedStatus)
             ? parsedStatus
             : null;
            var baseQuery = new BillQuery
                {
                    SearchIn = new List<string> { "BillCode" },
                    Keyword = SearchKeyword,
                    Status = selectedTrangThai == StatusOrder.None ? null : selectedTrangThai,
                    gridRequest = new GridRequest
                    {
                        page = (request.StartIndex / pagination.ItemsPerPage) + 1,
                        pageSize = pagination.ItemsPerPage,
                        skip = request.StartIndex,
                        take = pagination.ItemsPerPage,
                        sort = request.GetSortByProperties()
                            .Select(s => new Sort
                            {
                                field = s.PropertyName,
                                dir = s.Direction == SortDirection.Ascending ? "asc" : "desc"
                            }).ToList()
                    }
                };

            requestRestAPI.Endpoint = "api/Bill/GetPaged";

            ResultAPI result = await CallApi.Post<DataTableJson>(requestRestAPI, baseQuery);
            if (result.Status == StatusCode.OK && result.Data is DataTableJson dataTable)
            {
                var items = JsonSerializer.Deserialize<List<BillDto>>(dataTable.Data.GetRawText(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<BillDto>();

                items = items
    .Where(x => x.Status != StatusOrder.Cancelled && x.Status != StatusOrder.Completed)
    .ToList();

                var totalRecords = dataTable.RecordsTotal ?? items.Count;
                return GridItemsProviderResult.From(items, totalRecords);
            }
            StateHasChanged();
            return GridItemsProviderResult.From(new List<BillDto>(), 0);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách hóa đơn: {ex.Message}");
            return GridItemsProviderResult.From(new List<BillDto>(), 0);
        }
    }

    private async Task RefresData(int value)
    {
        try
        {
            pagination.ItemsPerPage = value;
            await pagination.SetCurrentPageIndexAsync(0);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách: {ex.Message}");
        }
    }
    private async Task RefreshDataAsync()
    {
        await BillGrid.RefreshDataAsync();
    }

    private Task GoToDetail(Guid billId)
    {
        navigation.NavigateTo($"/bills/user/{billId}");


        return Task.CompletedTask;
    }
    private string GetStatusText(StatusOrder status)
    {
        return status switch
        {
            StatusOrder.Pending => "Chờ xác nhận",
            StatusOrder.Confirmed => "Đã xác nhận",
            StatusOrder.Shipping => "Đang giao hàng",
            StatusOrder.Completed => "Đã giao thành công",
            StatusOrder.Cancelled => "Đã hủy",
       
            _ => "Không xác định"
        };
    }


    private List<KeyValuePair<StatusOrder?, string>> StatusOptions = new()
{
    new(null, "Tất cả trạng thái"),
    new(StatusOrder.Pending, "Chờ xác nhận"),
    new(StatusOrder.Confirmed, "Đã xác nhận"),
    new(StatusOrder.Shipping, "Đang giao hàng"),
  

};

    private void GetSelectTrangThai()
    {
        _SelectTrangThai = Enum.GetValues(typeof(StatusOrder))
            .Cast<StatusOrder>()
            .Where(e => e != StatusOrder.Cancelled && e != StatusOrder.Completed) // ❌ Bỏ 2 trạng thái
            .OrderBy(e => e == StatusOrder.None ? 0 : 1)
            .ThenBy(e => e)
            .ToDictionary(
                e => e.ToString(),
                e => CapitalizeFirstLetter(e.GetDescription())
            );
    }



    private string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return input;

        return char.ToUpper(input[0]) + input[1..];
    }

    protected override void OnInitialized()
    {
        GetSelectTrangThai();

    }
    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetSelectTrangThai();           // Load dropdown trạng thái
            await RefreshDataAsync();       // Gọi load dữ liệu cho FluentDataGrid
            isFirstRender = false;
        }
    }



}
 