@page "/Quan-Ly/Bill/{userId:guid}"
@page "/Quan-Ly/Bill"


@using Service.SnapFood.Manage.Dto
@using Service.SnapFood.Manage.Dto.BillDto
@using System.Text.Json
@using Service.SnapFood.Manage.Enums
@using Service.SnapFood.Manage.Infrastructure.Services
@using Service.SnapFood.Manage.Query
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Share.Model.Commons
@using Service.SnapFood.Share.Model.Enum

@using Service.SnapFood.Share.Model.ServiceCustomHttpClient
@using Service.SnapFood.Share.Query
@using Service.SnapFood.Share.Query.Grid
@using Microsoft.FluentUI.AspNetCore.Components


@inject NavigationManager navigation
@namespace Service.SnapFood.Manage.Components.Pages.Manage.Bill


@if (CurrentUser.UserId == Guid.Empty)
{
    <p>Bạn chưa đăng nhập!</p>
}
else if (CurrentUser.Roles.Contains(EnumRole.Admin) || CurrentUser.Roles.Contains(EnumRole.Manager))
{
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="12" Style="width:100%;">
        <h2>Danh sách hóa đơn</h2>


        <div style="display: flex; align-items: center; gap: 10px;">

            <FluentSearch Style="min-width:200px;" @bind-Value="SearchKeyword" @bind-Value:after=RefreshDataAsync Placeholder="Nhập vào từ khóa" />



            <FluentSelect Items="_SelectTrangThai"
                          @bind-Value="SelectedTrangThai"
                          @bind-Value:after="RefreshDataAsync"
                          OptionText="@(x => x.Value)"
                          OptionValue="@(x => x.Key)"
                          Style="width:100%"
                          Position="SelectPosition.Below"
                          Width="150px;">
            </FluentSelect>

        </div>
        <FluentDataGrid Style="width:100%;" @ref="BillGrid"
                        TGridItem="BillDto"
                        ItemsProvider="LoadBills"
                        Pagination="@pagination"
                        ResizableColumns="false"
                        RowSize="DataGridRowSize.Large"
                        ShowHover="true"
                        GenerateHeader="GenerateHeaderOption.Sticky"
                        GridTemplateColumns="1.5fr 1.5fr 1.5fr 1.5fr 1.5fr 1.5fr 1fr">

            <TemplateColumn Title="Mã hóa đơn" Context="item">
                @item.BillCode
            </TemplateColumn>
            <TemplateColumn Title="Người đặt" Context="item">
                @item.FullName
            </TemplateColumn>


            <TemplateColumn Title="Tổng tiền" Context="item">
                @if ((item.TotalAmountEndow + item.DiscountAmount) > 0)
                {
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <FluentLabel Style="text-decoration: line-through;font-size:12px;">
                            @((item.TotalAmount + item.PhiVanChuyen).ToString("N0")) đ
                        </FluentLabel>

                        @if (item.TotalAmount > item.TotalAmountEndow)
                        {
                            var discountPercent = Math.Round(((item.TotalAmountEndow + item.DiscountAmount) / (item.TotalAmount + item.PhiVanChuyen)) * 100);
                            <FluentLabel Style="color: green;font-size:12px;">
                                -@discountPercent %
                            </FluentLabel>
                        }
                    </div>
                    <FluentLabel>@((item.TotalAmount + item.PhiVanChuyen - item.DiscountAmount - item.TotalAmountEndow).ToString("N0")) đ</FluentLabel>

                }
                else
                {
                    <FluentLabel>@((item.TotalAmount + item.PhiVanChuyen).ToString("N0")) đ</FluentLabel>
                }
            </TemplateColumn>

            <TemplateColumn Title="Thời gian" Context="item">
                @item.Created.ToString("dd/MM/yyyy HH:mm")
            </TemplateColumn>
            <TemplateColumn Title="Phương thức đặt hàng" Context="item">
                @EnumExtensions.GetDescription(item.PhuongThucDatHang)
            </TemplateColumn>
            <TemplateColumn Title="Phương thức nhận hàng" Context="item">
                @EnumExtensions.GetDescription(item.ReceivingType)
            </TemplateColumn>
            <TemplateColumn Title="Trạng thái" Context="item">
                <div class="@GetStyle(item.Status)"> @GetStatusText(item.Status)</div>

            </TemplateColumn>
            <TemplateColumn Title="" Context="item">
                <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => GoToDetail(item.Id))" Title="Xem chi tiết">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Eye())" />
                </FluentButton>
            </TemplateColumn>




        </FluentDataGrid>

        <Paginator PaginationState="@pagination" SelectedPageSizeChanged="RefresData" />
    </FluentStack>
}
else
{
    <p>Bạn không có quyền sử dụng chức năng.</p>
}
@code {
    [CascadingParameter] public CurrentUser CurrentUser { get; set; } = new();
    [Parameter]
    public Guid userId { get; set; }
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    private ApiRequestModel requestRestAPI = new ApiRequestModel();
    protected FluentDataGrid<BillDto> BillGrid { get; set; } = default!;
    protected string SearchKeyword { get; set; } = string.Empty;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private Dictionary<String, String> _SelectTrangThai = new Dictionary<string, string>();
    private string SelectedTrangThai = "None";

    private async ValueTask<GridItemsProviderResult<BillDto>> LoadBills(GridItemsProviderRequest<BillDto> request)
    {
        try
        {

            bool Convert = Enum.TryParse<StatusOrder>(SelectedTrangThai, out var parsedStatus);

            if (Convert)
            {
                var baseQuery = new BillQuery
                {
                    SearchIn = new List<string> { "BillCode" },
                    UserId = userId,
                    Keyword = SearchKeyword,
                    Status = parsedStatus,
                    gridRequest = new GridRequest
                    {
                        page = (request.StartIndex / pagination.ItemsPerPage) + 1,
                        pageSize = pagination.ItemsPerPage,
                        skip = request.StartIndex,
                        take = pagination.ItemsPerPage,
                        sort = request.GetSortByProperties()
                            .Select(s => new Sort
                            {
                                field = s.PropertyName,
                                dir = s.Direction == SortDirection.Ascending ? "asc" : "desc"
                            }).ToList()
                    }
                };

                requestRestAPI.Endpoint = "api/Bill/GetPaged";

                ResultAPI result = await CallApi.Post<Dto.DataTableJson>(requestRestAPI, baseQuery);
                if (result.Status == StatusCode.OK && result.Data is Dto.DataTableJson dataTable)
                {
                    var items = JsonSerializer.Deserialize<List<BillDto>>(dataTable.Data.GetRawText(),
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<BillDto>();
                    var totalRecords = dataTable.RecordsTotal ?? items.Count;
                    return GridItemsProviderResult.From(items, totalRecords);

                }
                StateHasChanged();
                return GridItemsProviderResult.From(new List<BillDto>(), 0);
            }
            else
            {
                ToastService.ShowError($"Lỗi khi convert trạng thái");
                return GridItemsProviderResult.From(new List<BillDto>(), 0);
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách hóa đơn: {ex.Message}");
            return GridItemsProviderResult.From(new List<BillDto>(), 0);
        }
    }

    private async Task RefresData(int value)
    {
        try
        {
            pagination.ItemsPerPage = value;
            await pagination.SetCurrentPageIndexAsync(0);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Lỗi khi tải danh sách: {ex.Message}");
        }
    }
    private async Task RefreshDataAsync()
    {
        await BillGrid.RefreshDataAsync();
    }

    private Task GoToDetail(Guid billId)
    {
        navigation.NavigateTo($"/bills/user/{billId}");


        return Task.CompletedTask;
    }
    private string GetStatusText(StatusOrder status)
    {
        return status switch
        {
            StatusOrder.Pending => "Chờ xác nhận",
            // StatusOrder.Confirmed => "Đã xác nhận",
            StatusOrder.DangChuanBi => "Đang chuẩn bị",
            StatusOrder.ChoLayHang => "Chờ lấy hàng",
            StatusOrder.Shipping => "Đang giao hàng",
            StatusOrder.Completed => "Đã giao thành công",
            StatusOrder.Cancelled => "Đã hủy",

            _ => "Không xác định"
        };
    }
    private string GetStyle(StatusOrder status)
    {
        return status switch
        {
            StatusOrder.Pending => "text-warning",    // Màu vàng
            // StatusOrder.Confirmed => "text-primary", // Màu xanh
            StatusOrder.DangChuanBi => "text-primary", // Màu xanh
            StatusOrder.ChoLayHang => "text-info",
            StatusOrder.Shipping => "text-info",     // Màu xanh nhạt
            StatusOrder.Completed => "text-success", // Màu xanh lá
            StatusOrder.Cancelled => "text-danger",  // Màu đỏ
            _ => "text-dark"                         // Mặc định
        };
    }

    private List<KeyValuePair<StatusOrder?, string>> StatusOptions = new()
{
    new(null, "Tất cả trạng thái"),
    new(StatusOrder.Pending, "Chờ xác nhận"),
    // new(StatusOrder.Confirmed, "Đã xác nhận"),
     new(StatusOrder.DangChuanBi, "Đang chuẩn bị"),
    new(StatusOrder.ChoLayHang, "Chờ lấy hàng"),
    new(StatusOrder.Shipping, "Đang giao hàng"),
    new(StatusOrder.Completed, "Đã giao thành công"),
    new(StatusOrder.Cancelled, "Đã hủy"),

};

    private void GetSelectTrangThai()
    {
        _SelectTrangThai = Enum.GetValues(typeof(StatusOrder))
            .Cast<StatusOrder>()
            .OrderBy(e => e == StatusOrder.None ? 0 : 1)
            .ThenBy(e => e)
            .ToDictionary(
                e => e.ToString(),
                e => CapitalizeFirstLetter(e.GetDescription())
            );
    }


    private string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return input;

        return char.ToUpper(input[0]) + input[1..];
    }

    protected override void OnInitialized()
    {
        GetSelectTrangThai();

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetSelectTrangThai();           // Load dropdown trạng thái
            await RefreshDataAsync();       // Gọi load dữ liệu cho FluentDataGrid
        }
    }

}









