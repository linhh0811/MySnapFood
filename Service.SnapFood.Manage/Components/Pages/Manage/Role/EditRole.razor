@namespace Service.SnapFood.Manage.Components.Pages.Manage.Role
@using Microsoft.FluentUI.AspNetCore.Components
@using Service.SnapFood.Manage.Dto
@using Service.SnapFood.Manage.Dto.Role
@using Service.SnapFood.Share.Interface.Extentions
@using Service.SnapFood.Manage.Infrastructure.Services
@using Service.SnapFood.Share.Model.SQL
@using Service.SnapFood.Share.Model.ServiceCustomHttpClient

@inherits ComponentBase
@implements IDialogContentComponent<EditOrUpdateParameters>

<FluentDialog @ref="Dialog" Modal="true" TrapFocus="true" Style="width: 500px;">
    <FluentDialogHeader>
        <h3>@(Content.IsEditMode ? "Sửa quyền" : "Thêm quyền")</h3>
    </FluentDialogHeader>

    <EditForm Model="RoleModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <FluentMessageBar Title="Lỗi" Intent="@MessageIntent.Error">
                @ErrorMessage
            </FluentMessageBar>
        }
        <FluentStack Orientation="Orientation.Vertical" Gap="15">
            <FluentTextField Label="Tên quyền" @bind-Value="RoleModel.RoleName" Style="width:100%;" />
            <ValidationMessage style="color:red" For="@(() => RoleModel.RoleName)" />

            <FluentTextArea Label="Mô tả" @bind-Value="RoleModel.Description" Style="width:100%;" Rows="3" />
                
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" Gap="10">
                <FluentButton Appearance="Appearance.Neutral" @onclick="HideDialog" Disabled="@isSaving">Hủy</FluentButton>
                <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span style="margin-left: 8px;">Đang lưu...</span>
                    }
                    else
                    {
                        <span>Lưu</span>
                    }
                </FluentButton>
            </FluentStack>
        </FluentStack>
    </EditForm>
</FluentDialog>

@code {
    [Inject] private ICallServiceRegistry CallApi { get; set; } = default!;
    [Inject] private IToastService ToastService { get; set; } = default!;
    [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
    [Parameter] public EditOrUpdateParameters Content { get; set; } = new();
    private ApiRequestModel requestRestAPI = new ApiRequestModel();
    private RoleDto RoleModel { get; set; } = new RoleDto();
    private string? ErrorMessage;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        if (Content.IsEditMode)
        {
            await LoadRole();
        }
    }

    private async Task LoadRole()
    {
        requestRestAPI.Endpoint = $"api/Role/{Content.Id}";
        ResultAPI result = await CallApi.Get<RoleDto>(requestRestAPI);
        if (result.Status == StatusCode.OK)
        {
            RoleModel = result.Data as RoleDto ?? new RoleDto();
        }
        else
        {
            ToastService.ShowError("Không thể tải thông tin quyền: " + result.Message);
        }
    }

    private async Task HandleSubmit()
    {
        ErrorMessage = null;
        try
        {
            isSaving = true;
            if (Content.IsEditMode)
            {
                requestRestAPI.Endpoint = $"api/Role/{Content.Id}";
                ResultAPI result = await CallApi.Put(requestRestAPI, RoleModel);
                if (result.Status == StatusCode.OK)
                {
                    ToastService.ShowSuccess("Cập nhật quyền thành công.");
                }
                else
                {
                    ErrorMessage = "Cập nhật quyền thất bại: " + result.Message;
                }
            }
            else
            {
                requestRestAPI.Endpoint = "api/Role";
                ResultAPI result = await CallApi.Post<RoleDto>(requestRestAPI, RoleModel);
                if (result.Status == StatusCode.OK)
                {
                    ToastService.ShowSuccess("Thêm quyền thành công.");
                }
                else
                {
                    ErrorMessage = "Thêm quyền thất bại: " + result.Message;
                }
            }

            if (ErrorMessage == null)
            {
                await Dialog.CloseAsync();
                await Content.OnRefresh.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Đã xảy ra lỗi: " + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task HideDialog()
    {
        await Dialog.CloseAsync();
    }
}