

@page "/Quan-Ly/ThongKe"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JS

<h3 class="text-center text-uppercase mb-4">Thống kê hóa đơn</h3>

@if (isLoading)
{
    <div class="text-center text-muted">Đang tải dữ liệu...</div>
}
else
{
    <!-- Tổng hóa đơn & doanh thu -->
    <div class="d-flex justify-content-center flex-wrap gap-3 align-items-start stats-container">
        <div class="stat-box" style="background-color:#2962FF;">
            <h3>Tổng số hóa đơn</h3>
            <p>@totalInvoices</p>
        </div>
        <div class="stat-box" style="background-color:#2E7D32;">
            <h3>Tổng doanh thu</h3>
            <p>@totalRevenue?.ToString("N0") đ</p>
        </div>
        <div class="stat-box" style="background-color:#D32F2F;">
            <h3>Số đơn hủy</h3>
            <p>@totalCancelledOrders</p>
        </div>
    </div>

    <!-- Bộ lọc thời gian -->
    <h4 class="mt-4">Biểu đồ doanh thu theo Ngày - Tuần - Tháng</h4>

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Từ ngày</label>
            <InputDate @bind-Value="fromDate" class="form-control" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Đến ngày</label>
            <InputDate @bind-Value="toDate" class="form-control" />
        </div>
        <div class="col-md-3 align-self-end">
            <button class="btn btn-primary w-100" @onclick="LoadAllRevenueCharts">Xem thống kê</button>
        </div>
    </div>

    <!-- Biểu đồ -->
    <div class="row">
        <div class="col-md-4">
            <h6 class="fw-bold">Doanh thu theo ngày</h6>
            <canvas id="dailyRevenueChart" style="width: 100%; max-height: 250px;"></canvas>
        </div>

        <div class="col-md-4">
            <h6 class="fw-bold">Doanh thu theo tuần</h6>
            <canvas id="weeklyRevenueChart" style="width: 100%; max-height: 250px;"></canvas>
        </div>

        <div class="col-md-4">
            <h6 class="fw-bold">Doanh thu theo tháng</h6>
            <canvas id="monthlyRevenueChart" style="width: 100%; max-height: 250px;"></canvas>
        </div>
    </div>
    <div class="top-container">
        <div class="top5-products">
            <h4 class="text-center">Top 5 sản phẩm bán chạy nhất</h4>
            <ul>
                @foreach (var item in top5Products)
                {
                    <li class="product-item">
                        <img src="@item.ImageUrl" alt="@item.Label" />
                        <div class="product-info">
                            <p class="label">@item.Label</p>
                            <p class="value">Đã bán: @((int)item.Value)</p>
                        </div>
                    </li>
                }
            </ul>
        </div>

        <div class="top5-products">
            <h4 class="text-center">Top 5 combo bán chạy nhất</h4>
            <ul>
                @foreach (var item in top5Combos)
                {
                    <li class="product-item">
                        <img src="@item.ImageUrl" alt="@item.Label" />
                        <div class="product-info">
                            <p class="label">@item.Label</p>
                            <p class="value">Đã bán: @((int)item.Value)</p>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>



}



@code {
    private int totalInvoices;
    private decimal? totalRevenue;
    private int totalCancelledOrders;
    private bool isLoading = true;

    private DateTime fromDate = DateTime.Today.AddDays(-6);
    private DateTime toDate = DateTime.Today;

    public class ChartItemDto
    {
        public string Label { get; set; } = "";
        public decimal Value { get; set; }
        public string ImageUrl { get; set; } = "";
    }

    public class DailyRevenueDto
    {
        public DateTime Date { get; set; }
        public decimal Amount { get; set; }
        public int Count { get; set; }
    }

    private bool isLoadingTop5 = true;
    private List<ChartItemDto>? top5Products = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            totalRevenue = await Http.GetFromJsonAsync<decimal>("api/bill/total");
            totalInvoices = await Http.GetFromJsonAsync<int>("api/bill/totalInvoices");
            totalCancelledOrders = await Http.GetFromJsonAsync<int>("api/bill/total-cancelled");
            await LoadAllRevenueCharts();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Lỗi khi tải thống kê: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private List<ChartItemDto> top5Combos = new();




    private async Task LoadAllRevenueCharts()
    {
        await LoadDailyRevenueChart();
        await LoadWeeklyRevenueChart();
        await LoadMonthlyRevenueChart();
        await LoadTop5Products();
        await LoadTop5Combos();

    }

    private async Task LoadDailyRevenueChart()
    {
        var data = await Http.GetFromJsonAsync<List<DailyRevenueDto>>(
            $"api/bill/dailyRevenue?fromDate={fromDate:yyyy-MM-dd}&toDate={toDate:yyyy-MM-dd}");

        var labels = data.Select(d => d.Date.ToString("dd/MM")).ToArray();
        var values = data.Select(d => d.Amount).ToArray();
        var count = data.Select(d => d.Count).ToArray();

        await JS.InvokeVoidAsync("drawDailyRevenueChart", labels, values, count);
    }

    private async Task LoadWeeklyRevenueChart()
    {
        var data = await Http.GetFromJsonAsync<List<ChartItemDto>>(
            $"api/bill/weeklyRevenue?fromDate={fromDate:yyyy-MM-dd}&toDate={toDate:yyyy-MM-dd}");

        var labels = data.Select(d => d.Label).ToArray();
        var values = data.Select(d => d.Value).ToArray();


        await JS.InvokeVoidAsync("drawWeeklyRevenueChart", labels, values);
    }

    private async Task LoadMonthlyRevenueChart()
    {
        var data = await Http.GetFromJsonAsync<List<ChartItemDto>>(
            $"api/bill/monthlyRevenue?fromDate={fromDate:yyyy-MM-dd}&toDate={toDate:yyyy-MM-dd}");

        var labels = data.Select(d => d.Label).ToArray();
        var values = data.Select(d => d.Value).ToArray();

        await JS.InvokeVoidAsync("drawMonthlyRevenueChart", labels, values);
    }

    private async Task LoadTop5Products()
    {
        isLoading = true;
        try
        {
            top5Products = await Http.GetFromJsonAsync<List<ChartItemDto>>(
                $"api/bill/top-best-selling?fromDate={fromDate:yyyy-MM-dd}&toDate={toDate:yyyy-MM-dd}&top=5");

            if (top5Products == null || !top5Products.Any())
            {
                top5Products = new List<ChartItemDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Lỗi tải dữ liệu: {ex.Message}");
            top5Products = new List<ChartItemDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    private async Task LoadTop5Combos()
    {
        isLoading = true;
        try
        {
            top5Combos = await Http.GetFromJsonAsync<List<ChartItemDto>>(
                $"api/bill/top-best-combo?fromDate={fromDate:yyyy-MM-dd}&toDate={toDate:yyyy-MM-dd}&top=5");

            if (top5Combos == null || !top5Combos.Any())
            {
                top5Combos = new List<ChartItemDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Lỗi tải dữ liệu: {ex.Message}");
            top5Combos = new List<ChartItemDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
<style>
    .top-container {
        display: flex;
        gap: 20px;
        margin-top: 30px;
    }

        .top-container .top5-products {
            flex: 1;
        }

    .stats-container {
        margin-bottom: 30px;
    }

    .stat-box {
        width: 250px;
        padding: 20px 15px;
        border-radius: 8px;
        color: white;
        text-align: center;
        box-shadow: 0 4px 8px rgb(0 0 0 / 0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .stat-box h3 {
            margin: 0;
            font-weight: 400;
            font-size: 1.1rem;
        }

        .stat-box p {
            margin: 10px 0 0;
            font-weight: 700;
            font-size: 2rem;
        }



        .top5-products h4 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .top5-products ul {
            list-style: none;
            padding-left: 0;
            margin: 0;
        }

            .top5-products ul li {
                background: #fff;
                padding: 12px 15px;
                margin-bottom: 10px;
                border-left: 5px solid #3498db;
                border-radius: 6px;
                font-size: 1.1rem;
                transition: background-color 0.3s ease;
                cursor: default;
            }

                .top5-products ul li:hover {
                    background-color: #e6f2ff;
                }


        .top5-products ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

    .product-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

        .product-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
        }

    .product-info {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

        .product-info .label {
            font-weight: bold;
            margin: 0;
        }

        .product-info .value {
            margin: 0;
            color: #666;
        }

</style>
