// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Service.SnapFood.Infrastructure.EF.Contexts;

#nullable disable

namespace Service.SnapFood.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("931f07e5-46d8-4449-b77e-533bf4f33aa3"),
                            AddressType = 2,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            District = "Quận Nam Từ Liêm",
                            FullAddress = "Số 36 Hàm Nghi, Phường Cầu Diễn, Quận Nam Từ Liêm, Thành phố Hà Nội",
                            FullName = "BB Chicken-Hàm Nghi",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Latitude = 21.02983,
                            Longitude = 105.76913,
                            ModerationStatus = 0,
                            NumberPhone = "055931234",
                            Province = "Thành phố Hà Nội",
                            SpecificAddress = "Số 36 Hàm Nghi",
                            Ward = "Phường Cầu Diễn"
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BillCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountEndow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Bill", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceivingType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.ToTable("BillDelivery", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("ItemsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceEndow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillDetails", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillNotes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillNotes", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillPayments", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.CartComboItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ComboId");

                    b.ToTable("CartComboItems", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.CartProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("CartProductItems", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Categories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5b3cc50-ec70-4093-9d10-4c7b0c73f9ca"),
                            CategoryName = "Đồ uống",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 5,
                            ImageUrl = "https://jollibee.com.vn//media/catalog/category/thucuong.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0
                        },
                        new
                        {
                            Id = new Guid("aeb6acbb-2490-4d20-b6b4-3e15c1e878c8"),
                            CategoryName = "Gà sốt cay",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 1,
                            ImageUrl = "https://jollibee.com.vn//media/catalog/category/web-07.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0
                        },
                        new
                        {
                            Id = new Guid("90dc4303-d8e3-4e08-99cd-fbfe73b5ef00"),
                            CategoryName = "Mỳ ý",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 2,
                            ImageUrl = "https://jollibee.com.vn//media/catalog/category/web-06.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0
                        },
                        new
                        {
                            Id = new Guid("801ebf3e-d50c-48ec-998b-4f04ec7bfc3d"),
                            CategoryName = "Combo gà",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 7,
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/2/2/222278_4.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0
                        },
                        new
                        {
                            Id = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc6"),
                            CategoryName = "Gà rán",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 3,
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/l/c/lc0001_4.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0
                        },
                        new
                        {
                            Id = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc4"),
                            CategoryName = "Hamburger",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 4,
                            ImageUrl = "https://jollibee.com.vn//media/catalog/category/cat_burger_1.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0
                        },
                        new
                        {
                            Id = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc5"),
                            CategoryName = "Phần ăn phụ",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 6,
                            ImageUrl = "https://jollibee.com.vn//media/catalog/category/phananphu.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Combos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ac"),
                            BasePrice = 60000m,
                            CategoryId = new Guid("aeb6acbb-2490-4d20-b6b4-3e15c1e878c8"),
                            ComboName = "Combo cơm gà sốt cay",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Cơm Gà Sốt Cay + Nước ngọt",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/g/_/g_s_t_cay_-_4-compressed.jpg",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ad"),
                            BasePrice = 70000m,
                            CategoryId = new Guid("aeb6acbb-2490-4d20-b6b4-3e15c1e878c8"),
                            ComboName = "Combo cơm gà sốt cay",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Cơm Gà Sốt Cay +Súp bí đỏ+ Nước ngọt",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/g/_/g_s_t_cay_-_3-compressed.jpg",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ab"),
                            BasePrice = 65000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc4"),
                            ComboName = "Combo Burger Siêu Cay",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Burger Siêu Cay kèm Khoai Tây Chiên (M) và Pepsi Zero (M)",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/m/e/menu_burger_2.jpg.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-4890-abcd-2345678901bc"),
                            BasePrice = 85000m,
                            CategoryId = new Guid("801ebf3e-d50c-48ec-998b-4f04ec7bfc3d"),
                            ComboName = "Combo Gà Rán",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Gà Rán (1 miếng) kèm Khoai Tây Chiên (M) và Pepsi Zero (M)",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/2/2/222281_4.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-4901-bcde-3456789012cd"),
                            BasePrice = 87000m,
                            CategoryId = new Guid("801ebf3e-d50c-48ec-998b-4f04ec7bfc3d"),
                            ComboName = "Combo Gà Nướng",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Gà Nướng (1 miếng) kèm Khoai Tây Chiên (M) và Pepsi Zero (M)",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/2/2/228380.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.ComboItemsArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillDetailsId");

                    b.ToTable("ComboItemsArchives", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.ComboProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartComboId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ComboProductItem", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SizeId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4a7b7e8-63b6-4c90-a38a-74c5c8d9d7b1"),
                            BasePrice = 35000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc4"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Burger Siêu Cay",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/m/e/menu_burger_2.jpg.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Burger Siêu Cay",
                            Quantity = 0,
                            SizeId = new Guid("607f96c3-b3dc-4db3-8f5e-19b6e07cbcad")
                        },
                        new
                        {
                            Id = new Guid("9e41d162-3f6a-42a1-b9a6-28f6efbc7f5c"),
                            BasePrice = 35000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc4"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Burger Bulgogi",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/b/u/burger_bulgogi_4.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Burger Bulgogi",
                            Quantity = 0,
                            SizeId = new Guid("607f96c3-b3dc-4db3-8f5e-19b6e07cbcad")
                        },
                        new
                        {
                            Id = new Guid("2d8f7e1a-5cbb-4ff1-bcbc-f82b07dcb4ad"),
                            BasePrice = 35000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc4"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Burger Tôm",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/b/u/burger_shrimp_1_.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Burger Tôm",
                            Quantity = 0,
                            SizeId = new Guid("607f96c3-b3dc-4db3-8f5e-19b6e07cbcad")
                        },
                        new
                        {
                            Id = new Guid("2d8f7e1a-5cbb-4ff1-bcbc-f82b07dcb4ae"),
                            BasePrice = 55000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc4"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Burger Double Double",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/b/u/burger_shrimp_1_.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Burger Double Double",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("85c5e5a3-9a3d-4d9a-a09c-74647eb07bfc"),
                            BasePrice = 15000m,
                            CategoryId = new Guid("b5b3cc50-ec70-4093-9d10-4c7b0c73f9ca"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Pepsi Zero",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/d/r/drink_pepsi_zero_m_l__2.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Pepsi Zero",
                            Quantity = 0,
                            SizeId = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4")
                        },
                        new
                        {
                            Id = new Guid("85c5e5a3-9a3d-4d9a-a09c-84647eb07bfc"),
                            BasePrice = 20000m,
                            CategoryId = new Guid("b5b3cc50-ec70-4093-9d10-4c7b0c73f9ca"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Trà chanh hạt chia",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/h/_/h_nh_s_n_ph_m.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Trà chanh hạt chia",
                            Quantity = 0,
                            SizeId = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4")
                        },
                        new
                        {
                            Id = new Guid("85c5e5a3-9a3d-4d9a-a09c-84647eb07bfd"),
                            BasePrice = 15000m,
                            CategoryId = new Guid("b5b3cc50-ec70-4093-9d10-4c7b0c73f9ca"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Mirinda",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/t/h/th_c_u_ng_-_7_8_1.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Mirinda ",
                            Quantity = 0,
                            SizeId = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4")
                        },
                        new
                        {
                            Id = new Guid("85c5e5a3-9a3d-4d9a-a09c-84647eb07bfe"),
                            BasePrice = 15000m,
                            CategoryId = new Guid("b5b3cc50-ec70-4093-9d10-4c7b0c73f9ca"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "7 Up",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/t/h/th_c_u_ng_-_9_10.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "7 Up ",
                            Quantity = 0,
                            SizeId = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4")
                        },
                        new
                        {
                            Id = new Guid("85c5e5a3-9a3d-4d9a-a09c-84647eb07bff"),
                            BasePrice = 10000m,
                            CategoryId = new Guid("b5b3cc50-ec70-4093-9d10-4c7b0c73f9ca"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Nước suối",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/t/h/th_c_u_ng_-_1th_c_u_ng_-_2.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Nước suối ",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("85c5e5a3-9a3d-4d9a-a09c-84647eb08bff"),
                            BasePrice = 22000m,
                            CategoryId = new Guid("b5b3cc50-ec70-4093-9d10-4c7b0c73f9ca"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "MILKIS DELI",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/m/e/menu_-_milkis_menu_web.jpg.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "MILKIS DELI ",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("e1bb1ea5-94b2-45c7-98a2-b1fa0f4e3e6d"),
                            BasePrice = 25000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Khoai Tây Chiên",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/d/e/dessert_french_fries_m_i.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Khoai Tây Chiên",
                            Quantity = 0,
                            SizeId = new Guid("0d41a8fd-f372-4c77-b5a3-63368e3994bb")
                        },
                        new
                        {
                            Id = new Guid("b487da52-d738-4376-a1e3-c4a4d2fc7ef1"),
                            BasePrice = 25000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Mô tả",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/d/e/dessert_shake_potato_tuy_t_xanh_.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Khoai lắc tuyết xanh",
                            Quantity = 0,
                            SizeId = new Guid("0d41a8fd-f372-4c77-b5a3-63368e3994bb")
                        },
                        new
                        {
                            Id = new Guid("b487da52-d738-4376-a1e3-c4a4d2fc7ef2"),
                            BasePrice = 15000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Súp bí đỏ",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/p/h/ph_n_n_ph_-_5.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Súp bí đỏ",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("b487da52-d738-4376-a1e3-c4a4d2fc7ef3"),
                            BasePrice = 10000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Cơm trắng",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/p/h/ph_n_n_ph_-_6.png",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Cơm trắng",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("f6a71ac8-78f3-4194-88c9-c2aa9467f93e"),
                            BasePrice = 35000m,
                            CategoryId = new Guid("aeb6acbb-2490-4d20-b6b4-3e15c1e878c8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Gà sốt HS(1 miếng)",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/g/_/g_s_t_cay_-_7-compressed.jpg",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Gà sốt HS(1 miếng)",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("f6a71ac8-78f3-4194-88c9-c2aa9467f94e"),
                            BasePrice = 69000m,
                            CategoryId = new Guid("aeb6acbb-2490-4d20-b6b4-3e15c1e878c8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Gà sốt cay(2 miếng)",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/g/_/g_s_t_cay_-_6-compressed_1.jpg",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Gà sốt cay(2 miếng)",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("f6a71ac8-78f3-4194-88c9-c2aa9467f95e"),
                            BasePrice = 49000m,
                            CategoryId = new Guid("aeb6acbb-2490-4d20-b6b4-3e15c1e878c8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Cơm gà sốt cay",
                            ImageUrl = "https://jollibee.com.vn/media/catalog/product/cache/9011257231b13517d19d9bae81fd87cc/g/_/g_s_t_cay_-_5-compressed.jpg",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Cơm gà sốt cay",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("dbc17836-d6f4-46cb-bb9a-77b9c54e7b13"),
                            BasePrice = 40000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc6"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Gà Nướng (1 miếng)",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/2/2/227436_2.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Gà Nướng (1 miếng)",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("7b17b539-8168-42c5-8b9f-1c1c783bd423"),
                            BasePrice = 40000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc6"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Gà Rán (1 miếng)",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/l/c/lc0001_4.png.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Gà Rán (1 miếng)",
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("c1a8f0ee-73c9-4c2f-b10f-fc3d6561d275"),
                            BasePrice = 41000m,
                            CategoryId = new Guid("eeddb184-0a25-40a4-9e8f-98e905fc4dc6"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Gà Sốt Bơ Tỏi (1 miếng)",
                            ImageUrl = "https://www.lotteria.vn/media/catalog/product/cache/400x400/m/e/menu_menu_5_.jpg.webp",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ProductName = "Gà Sốt Bơ Tỏi (1 miếng)",
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.ProductCombo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCombos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("06a97eaa-4200-4fb2-8064-26c9a166cbee"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ad"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("f6a71ac8-78f3-4194-88c9-c2aa9467f95e"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("2bca8480-d20b-4831-baa0-2df3157c4a50"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ad"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("85c5e5a3-9a3d-4d9a-a09c-74647eb07bfc"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("ab40fd61-e114-4d68-95a3-bd50307bedea"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ad"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("b487da52-d738-4376-a1e3-c4a4d2fc7ef2"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("e5c27e5f-3086-418a-a565-17da34640484"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ac"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("f6a71ac8-78f3-4194-88c9-c2aa9467f95e"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("0b0f5af6-14d0-49ba-83fa-9da4423c38b8"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ac"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("85c5e5a3-9a3d-4d9a-a09c-74647eb07bfc"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("ae5e2ddd-70c1-4d9a-8de3-8b4865fd3be9"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ab"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("f4a7b7e8-63b6-4c90-a38a-74c5c8d9d7b1"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("11badfdf-fdfe-4712-b9cb-b1ec84406c65"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ab"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("e1bb1ea5-94b2-45c7-98a2-b1fa0f4e3e6d"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("6cee3731-2e4b-4d35-b445-8d243346e32c"),
                            ComboId = new Guid("a1b2c3d4-e5f6-4789-abcd-1234567890ab"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("85c5e5a3-9a3d-4d9a-a09c-74647eb07bfc"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("100de5e4-4cc3-4f0c-a822-a663a75306f2"),
                            ComboId = new Guid("b2c3d4e5-f6a7-4890-abcd-2345678901bc"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("7b17b539-8168-42c5-8b9f-1c1c783bd423"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("35082191-73b8-4ec4-ba48-7117fb2c737c"),
                            ComboId = new Guid("b2c3d4e5-f6a7-4890-abcd-2345678901bc"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("e1bb1ea5-94b2-45c7-98a2-b1fa0f4e3e6d"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b20c1277-65d4-4fdc-8ef3-1f514564825e"),
                            ComboId = new Guid("b2c3d4e5-f6a7-4890-abcd-2345678901bc"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("85c5e5a3-9a3d-4d9a-a09c-74647eb07bfc"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("001432f9-bcf6-4658-a18d-7d2355ef8f4f"),
                            ComboId = new Guid("c3d4e5f6-a7b8-4901-bcde-3456789012cd"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("dbc17836-d6f4-46cb-bb9a-77b9c54e7b13"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("8b7bdf47-431a-46e2-95f3-55660c18d70c"),
                            ComboId = new Guid("c3d4e5f6-a7b8-4901-bcde-3456789012cd"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("e1bb1ea5-94b2-45c7-98a2-b1fa0f4e3e6d"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("dcc9e791-5682-4b26-bdeb-ee426e2211b9"),
                            ComboId = new Guid("c3d4e5f6-a7b8-4901-bcde-3456789012cd"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = new Guid("85c5e5a3-9a3d-4d9a-a09c-74647eb07bfc"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.PromotionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionItem", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Promotions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.Property<decimal>("PromotionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnumRole")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d1e"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Quản trị viên",
                            EnumRole = 0,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d2e"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Quản trị viên",
                            EnumRole = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            RoleName = "Quản lý"
                        },
                        new
                        {
                            Id = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d3e"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Nhân viên",
                            EnumRole = 2,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            RoleName = "Nhân viên"
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Sizes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdditionalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Sizes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            SizeName = "Đồ uống"
                        },
                        new
                        {
                            Id = new Guid("14a181c3-1fa0-4c8b-9f3a-f0ffa0f53daa"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4"),
                            SizeName = "M"
                        },
                        new
                        {
                            Id = new Guid("d3214a4d-6bd9-45a5-b134-025dd83d6e77"),
                            AdditionalPrice = 4000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 2,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4"),
                            SizeName = "L"
                        },
                        new
                        {
                            Id = new Guid("f1dc439f-4733-450c-ba01-9f30840b5c3c"),
                            AdditionalPrice = 7000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 3,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("1c3d519b-04e4-42c3-a86d-7a7db6e9a7a4"),
                            SizeName = "XL"
                        },
                        new
                        {
                            Id = new Guid("0d41a8fd-f372-4c77-b5a3-63368e3994bb"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 2,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            SizeName = "Khoai tây chiên"
                        },
                        new
                        {
                            Id = new Guid("f4e7fb01-c202-41c3-90c5-176f80819b27"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("0d41a8fd-f372-4c77-b5a3-63368e3994bb"),
                            SizeName = "Nhỏ"
                        },
                        new
                        {
                            Id = new Guid("acd2f684-9d00-4ccd-b2b8-9c29f56874b0"),
                            AdditionalPrice = 7000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 2,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("0d41a8fd-f372-4c77-b5a3-63368e3994bb"),
                            SizeName = "Vừa"
                        },
                        new
                        {
                            Id = new Guid("bdbc68c5-bae4-4ac7-8e39-93320b86a0f8"),
                            AdditionalPrice = 15000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 3,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("0d41a8fd-f372-4c77-b5a3-63368e3994bb"),
                            SizeName = "Lớn"
                        },
                        new
                        {
                            Id = new Guid("607f96c3-b3dc-4db3-8f5e-19b6e07cbcad"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 3,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            SizeName = "Hamburger"
                        },
                        new
                        {
                            Id = new Guid("55a9b803-02e3-49be-9ee0-001c65915dbb"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("607f96c3-b3dc-4db3-8f5e-19b6e07cbcad"),
                            SizeName = "Tiêu chuẩn"
                        },
                        new
                        {
                            Id = new Guid("ab720625-aa55-47d3-8277-ecd80781adb5"),
                            AdditionalPrice = 10000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 2,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("607f96c3-b3dc-4db3-8f5e-19b6e07cbcad"),
                            SizeName = "Big"
                        },
                        new
                        {
                            Id = new Guid("1e4911cf-90aa-4b66-b932-d9e1a0eaf182"),
                            AdditionalPrice = 25000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 3,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("607f96c3-b3dc-4db3-8f5e-19b6e07cbcad"),
                            SizeName = "Mega"
                        },
                        new
                        {
                            Id = new Guid("8e1e9e3c-82e5-4142-b987-c39c8de69c0e"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 4,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            SizeName = "Mỳ ý"
                        },
                        new
                        {
                            Id = new Guid("fe970ae8-5051-4194-b5fd-a1ef9a23af32"),
                            AdditionalPrice = 0m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 1,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("8e1e9e3c-82e5-4142-b987-c39c8de69c0e"),
                            SizeName = "Phần thường"
                        },
                        new
                        {
                            Id = new Guid("59e38999-e70a-4ac5-a678-27b4e58f2ee3"),
                            AdditionalPrice = 12000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 2,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("8e1e9e3c-82e5-4142-b987-c39c8de69c0e"),
                            SizeName = "Phần lớn"
                        },
                        new
                        {
                            Id = new Guid("0cae455e-e72a-45e8-b07e-15b4d9869fcd"),
                            AdditionalPrice = 25000m,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayOrder = 3,
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            ParentId = new Guid("8e1e9e3c-82e5-4142-b987-c39c8de69c0e"),
                            SizeName = "Phần đại"
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Store", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d0e"),
                            AddressId = new Guid("931f07e5-46d8-4449-b77e-533bf4f33aa3"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Status = 0,
                            StoreName = "BB Chicken-Hàm Nghi"
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ModerationStatus")
                        .HasColumnType("int");

                    b.Property<string>("Numberphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a2e5d21-5f7b-4a7c-9d5e-3f6c8b2a1d4e"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "admin@gmail.com",
                            FullName = "Admin",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Password = "$2a$11$ziVaqBcBpeJG/N7dU3zixuTIXhc9m4PqJafpGsh.MdVrusMKOaZg6",
                            StoreId = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d0e"),
                            UserType = 1
                        },
                        new
                        {
                            Id = new Guid("8a2e5d21-5f5b-4a7c-9d5e-3f6c8b2a1d5e"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "manhdb123@gmail.com",
                            FullName = "Phạm Viết Mạnh",
                            LastModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModerationStatus = 0,
                            Password = "$2a$11$M9IzLduI.D8jPmQ6L3cdwuegxRkc6hd0dDI.AdB1ZWasx1IKmBZcm",
                            StoreId = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d0e"),
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c73b93ad-1b6d-4100-aed4-88b9fbd3f81a"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d1e"),
                            UserId = new Guid("8a2e5d21-5f5b-4a7c-9d5e-3f6c8b2a1d5e")
                        },
                        new
                        {
                            Id = new Guid("170a1ed0-34d8-481c-95df-93e8fa527ed7"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d3e"),
                            UserId = new Guid("8a2e5d21-5f5b-4a7c-9d5e-3f6c8b2a1d5e")
                        },
                        new
                        {
                            Id = new Guid("cfb94409-c54c-4232-86a0-e2998bad35d6"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("8a2e5d21-5f6b-4a7c-9d5e-3f6c8b2a1d3e"),
                            UserId = new Guid("8a2e5d21-5f7b-4a7c-9d5e-3f6c8b2a1d4e")
                        });
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Address", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Bill", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Store", "Store")
                        .WithMany("Bills")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.User", "User")
                        .WithMany("Orderes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillDelivery", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Bill", "Bill")
                        .WithOne("BillDelivery")
                        .HasForeignKey("Service.SnapFood.Domain.Entitys.BillDelivery", "BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillDetails", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillNotes", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Bill", "Bill")
                        .WithMany("BillNotes")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillPayment", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Bill", "Bill")
                        .WithMany("BillPayments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Cart", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Service.SnapFood.Domain.Entitys.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.CartComboItem", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Cart", "Cart")
                        .WithMany("CartComboItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.Combo", "Combo")
                        .WithMany("CartItemes")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.CartProductItem", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Cart", "Cart")
                        .WithMany("CartProductItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.Product", "Product")
                        .WithMany("CartItemes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.Sizes", "Size")
                        .WithMany("CartProductItem")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Combo", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Categories", "Category")
                        .WithMany("Combo")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.ComboItemsArchive", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.BillDetails", "BillDetails")
                        .WithMany("ComboItemsArchives")
                        .HasForeignKey("BillDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.ComboProductItem", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.CartComboItem", "CartComboItem")
                        .WithMany("ComboProductItems")
                        .HasForeignKey("CartComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.Product", "Product")
                        .WithMany("ComboProductItem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.Sizes", "Size")
                        .WithMany("ComboProductItem")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CartComboItem");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Product", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Categories", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.Sizes", "Size")
                        .WithMany("Product")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.ProductCombo", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Combo", "Combo")
                        .WithMany("ProductComboes")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.Product", "Product")
                        .WithMany("ProductComboes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.PromotionItem", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Combo", "Combo")
                        .WithMany("PromotionItems")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Service.SnapFood.Domain.Entitys.Product", "Product")
                        .WithMany("PromotionItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Service.SnapFood.Domain.Entitys.Promotions", "Promotion")
                        .WithMany("PromotionItems")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Sizes", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Sizes", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Store", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Address", "Address")
                        .WithOne("Store")
                        .HasForeignKey("Service.SnapFood.Domain.Entitys.Store", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.User", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Store", "Store")
                        .WithMany("Users")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.UserRole", b =>
                {
                    b.HasOne("Service.SnapFood.Domain.Entitys.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Service.SnapFood.Domain.Entitys.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Address", b =>
                {
                    b.Navigation("Store")
                        .IsRequired();
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Bill", b =>
                {
                    b.Navigation("BillDelivery")
                        .IsRequired();

                    b.Navigation("BillDetails");

                    b.Navigation("BillNotes");

                    b.Navigation("BillPayments");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.BillDetails", b =>
                {
                    b.Navigation("ComboItemsArchives");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Cart", b =>
                {
                    b.Navigation("CartComboItems");

                    b.Navigation("CartProductItems");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.CartComboItem", b =>
                {
                    b.Navigation("ComboProductItems");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Categories", b =>
                {
                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Combo", b =>
                {
                    b.Navigation("CartItemes");

                    b.Navigation("ProductComboes");

                    b.Navigation("PromotionItems");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Product", b =>
                {
                    b.Navigation("CartItemes");

                    b.Navigation("ComboProductItem");

                    b.Navigation("ProductComboes");

                    b.Navigation("PromotionItems");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Promotions", b =>
                {
                    b.Navigation("PromotionItems");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Roles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Sizes", b =>
                {
                    b.Navigation("CartProductItem");

                    b.Navigation("ComboProductItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.Store", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Service.SnapFood.Domain.Entitys.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orderes");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
